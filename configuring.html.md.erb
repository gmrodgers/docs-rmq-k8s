---
title: Configuring Pivotal RabbitMQ for Kubernetes
owner: RMQ for k8s
---

The Kubernetes Operator is configured using a configmap in the `pivotal-rabbitmq-system` namespace.
Initial values are populated automatically based on the parameters provided to the `--set` argument in the
`duffle install` command if you installed through the Cloud Native Application Bundle (CNAB).

To see or change these settings after the installation, run:

```
kubectl -n pivotal-rabbitmq-system edit configmap p-rmq-operator-config
```

The configmap looks like this:

  ```
  data:
    config: |
      image: eu.gcr.io/my-account/p-rabbitmq-for-kubernetes-staging-rabbitmq-228ecdc119f602d199fa39cc0326057e@sha256:6709cafde00784361b231f6c94b6dbecb8fefd3d3195676ed81823e007e37449
      imagePullSecret: p-rmq-registry-access
      service:
        type: NodePort
        annotations:
          service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
      persistence:
        storageClassName: azurefile
        storage: 20Gi
      resources:
        limits:
          memory: 2Gi
          cpu: 500m
        requests:
          memory: 2Gi
          cpu: 100m
  ```

The following parameters are supported:
    <table>
      <tr>
        <th width="35%">Parameter</th>
        <th width="65%">Description</th>
      </tr>
      <tr>
        <td><code>image</code></td>
        <td>This is the RabbitMQ image to be used for RabbitMQ instances. If you installed using CNAB, it should be configured automatically.</td>
      </tr>
      <tr>
        <td>(Optional) <code>imagePullSecret</code></td>
        <td>If your registry requires authentication, this is the name of the secret used to pull images. You can create it using <code>kubectl -n pivotal-rabbitmq-system create secret docker-registry</code>.</td>
      </tr>
      <tr>
        <td>(Optional) <code>service</code></td>
        <td>
          The Kubernetes service for the <code>RabbitmqCluster</code> service.
          Available settings are <code>type</code> and <code>annotations</code>.
          <tr>
            <td>(Optional) <code>type</code></td>
              <td>
              <ul>
                <li><code>ClusterIP</code> (default)</li>
                <li><code>NodePort</code></li>
                <li><code>LoadBalancer</code></li>
              </ul>
              <p class="note">
                <strong>Note:</strong> <%= vars.product_full %> currently does not support the <code>ExternalName</code> ServiceType.
              </p>
              </td>
          </tr>
          <tr>
            <td>(Optional) <code>annotations</code></td>
            <td>Service annotations can be used to configure cloud-specific properties of a LoadBalancer service.</td>
          </tr>
      <tr>
        <td>(Optional) <code>persistence</code></td>
        <td>
          These are persistence settings for <code>RabbitmqClusters</code>.
          Available settings are <code>storageClassName</code> and <code>storage</code>.
          <tr>
            <td>(Optional) <code>storageClassName</code></td>
            <td>This is the name of the Kubernetes storage class to use. If not configured, the default <code>storageclass</code> is used.</td>
          </tr>
          <tr>
            <td>(Optional) <code>storage</code></td>
            <td>This is the default capacity of the persistent volume.</td>
          </tr>
        </td>
      </tr>
      <tr>
        <td>(Optional) <code>resources</code></td>
        <td>
          This setting can be used to set the CPU and Memory Limits and Requests for <code>RabbitmqCluster</code> containers.
          Available settings are <code>limits</code> and <code>requests</code>.
        </td>
      </tr>
      <tr>
        <td>(Optional) <code>limits</code></td>
        <td> This setting is used to set the resource limits for the RabbitMQ containers in Kubernetes.
             Available settings are <code>cpu</code> and <code>memory</code>.
        </td>
      </tr>
      <tr>
        <td>(Optional) <code>requests</code></td>
        <td> This setting is used to set the resource requests for the RabbitMQ containers in Kubernetes.
             Available settings are <code>cpu</code> and <code>memory</code>.
        </td>
      </tr>
      <tr>
        <td>(Optional) <code>cpu</code></td>
        <td>
          This setting is used to set the CPU requests/limits for the RabbitMQ containers. Default values for requests: 100m , limits: 500m
        </td>
      </tr>
      <tr>
        <td>(Optional) <code>memory</code></td>
        <td>
          This setting is used to set the memory requests and limits for the RabbitMQ containers. The default values for both requests and limits are 2Gi.
          The RabbitMQ high watermark is set to 0.4 times the available memory by default, and in this case it considers the <code>limits</code> value. Pivotal recommends keeping the requests and limits as the same value.
        </td>
      </tr>
    </table>

Configuration changes take effect when the operator is restarted. If you edit the configmap, you have to restart the operator by running:

  ```
  kubectl -n pivotal-rabbitmq-system rollout restart deployment.apps/p-rmq-operator
  ```
