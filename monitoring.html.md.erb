---
title: Monitoring Pivotal RabbitMQ for Kubernetes
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to monitor <%= vars.product_full %>.

## <a id='overview'></a> Overview

RabbitMQ v3.8 and later deploys with the `rabbitmq_prometheus` plugin. This enables a
Prometheus deployment to scrape metrics from the RabbitMQ cluster with minimal configuration.

The following steps outline how to set up a Prometheus deployment to monitor RabbitMQ metrics. We
<%# Specify the party (Pivotal, Cloud Foundry, etc). %> also describe how to display those metrics in Grafana.

## <a id='kube-prom'></a> Deploy Prometheus with kube-prometheus

[Prometheus](https://prometheus.io/) is a metrics database used in Kubernetes
deployments. While Kubernetes can be configured with other monitoring methods, the Prometheus
data model, service discovery capability, and modular architecture make Prometheus especially well suited to
monitoring cloud-native apps and infrastructure. There are several ways to deploy
Prometheus.

We <%# Specify the party (Pivotal, Cloud Foundry, etc). %> cover the requirements for deploying the `kube-prometheus` monitoring tools,
as well as the necessary resources if you choose a different deployment strategy.

The `kube-prometheus` project provides manifests for a metrics stack within your Kubernetes cluster, including
an operator for Prometheus, Alert Manager, and Grafana. <%# An operator for each or one operator they all share? %>

For more information, see the [kube-prometheus project GitHub repository](https://github.com/coreos/kube-prometheus)
and the [kube-prometheus installation guide](https://github.com/coreos/kube-prometheus#quickstart) in GitHub.

Each `RabbitMQCluster` requires a `ServiceMonitor` custom resource to be deployed in its namespace.
This resource targets the `RabbitMQCluster` through a selector.

For more information about selectors, see the
[Kubernetes documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors).

<%# What does the below step achieve, if anything? Does the operator need to know details about `ServiceMonitor`
for any of the next sections? %>

1. Check your `RabbitMQCluster` labels by running:

    ```
    kubectl get service CLUSTER-ingress --show-labels
    ```

    Where `CLUSTER` is the name of your cluster.

For example, if your cluster name is `rabbitmq-1` the command is:

    <pre class="terminal">
      kubectl get service rabbitmq-1-ingress --show-labels`.
    </pre>

<%# This is just the output of the command above, right? We should make that explicit. %>

See below for the corresponding `ServiceMonitor` resource to deploy for `rabbitmq-1`:

    ```
    apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      name: rabbitmq-1
      namespace: rabbitmq-1
      spec:
      endpoints:
      - interval: 15s
        port: https
      selector:
        matchLabels:
          app: rabbitmq-1
    ```

## <a id='scrape'></a> Deploy Prometheus with Scraping Annotations

<%# Is this section covering an alternative to deploying Prometheus with kube-promethesus? If so, we need to move the Promethesus intro text from the previous section outside it. %>

Before you can deploy Prometheus manually, several resources are required for Prometheus to begin scraping
metrics from your RabbitMQ cluster:

* A `ClusterRole` permitting `get` access to the `/metrics` endpoint

<%# Does the operator add the below somewhere? If so, where? %>

    ```
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: prometheus
    rules:
    - nonResourceURLs:
      - /metrics
      verbs:
      - get
    ```

* A `ClusterRoleBinding` linking the `ClusterRole` to your Prometheus deployment’s `ServiceAccount`

  <p class="note">
    <strong>Note:</strong> You could bind <code>ClusterRole</code> to the default <code>ServiceAccount</code>
    in the Prometheus deployment’s namespace instead. However, Pivotal recommends you create a dedicated
    <code>ServiceAccount</code> for your deployment. <%# Why? %>
  </p>

<%# Does the operator add the below somewhere? If so, where? %>

    ```
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: prometheus
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: prometheus
    subjects:
    - kind: ServiceAccount
      name: prometheus
      namespace: monitoring
    ```

1. Monitor a new `RabbitMQCluster` by adding the following to the `annotations` section of your
`RabbitMQCluster` Cluster `CustomResource` specifications: <%# What's the file name? %>

    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: rabbitmq-1
    spec:
      service:
        annotations:
          "prometheus.io/scrape": "true"
          "prometheus.io/port": "15692"
    ```

1. Monitor an existing `RabbitMQCluster` by editing the cluster’s ingress service YAML, adding the following
annotations in the `metadata` section of the manifest: <%# What is the ingress service YAML file name? Is the manifest a chunk of text within the ingress service YAML? %>

    ```
    metadata:
       annotations:
          "prometheus.io/scrape": "true"
          "prometheus.io/port": "15692"
    ```

## <a id='grafana'></a> Monitor Dashboards with Grafana

If you do not deploy with `kube-prometheus`, you need to deploy your own Grafana resources separately.
RabbitMQ provides Grafana dashboards that integrate the scraped Prometheus metrics. To deploy your own Grafana
resources:

1. Go to the [Grafana website](https://grafana.com/orgs/rabbitmq) to view the list of official RabbitMQ Grafana
dashboards.
1. Click on the dashboard you want to use. <%# Should we advise on how to choose one? %>
1. Click the **Copy ID to Clipboard** button<%# Delete "button" if redundant. For example, write "click Save" instead of "Click the Save button". %> or the **Download JSON** link. <%# Why choose one over the other? %>
1. Follow the steps in the [Grafana documentation](https://grafana.com/docs/reference/export_import/#importing-a-dashboard) to import your chosen dashboard into Grafana. <%# This guide doesn't mention dashboard IDs -- is the ID the URL? Should we just say to download the JSON in the previous step? %>
