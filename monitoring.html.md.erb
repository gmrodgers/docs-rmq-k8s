---
title: Monitoring Pivotal RabbitMQ for Kubernetes
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to monitor <%= vars.product_full %>.

## <a id='overview'></a> Overview

RabbitMQ deploys with the `rabbitmq_prometheus` plugin (from version v3.8.0 onwards). This allows a
Prometheus deployment to scrape metrics from the RabbitMQ cluster with minimal configuration.

The following steps outline how to set up a Prometheus deployment to monitor RabbitMQ metrics. We
<%# Specify the party (Pivotal, Cloud Foundry, etc). %>will<%# Avoid "will": present tense is preferred. %> also describe how to display those metrics in Grafana.

## <a id='kube-prom'></a> Deploying Prometheus with `kube-prometheus`

[Prometheus](https://prometheus.io/) is the de-facto metrics database used in Kubernetes
deployments. While Kubernetes can be configured with other monitoring solutions, the Prometheus
data model, service discovery capability, and modular architecture make it well suited to
monitoring cloud-native apps and infrastructure. There are several ways to deploy
Prometheus. We <%# Specify the party (Pivotal, Cloud Foundry, etc). %>will<%# Avoid "will": present tense is preferred. %> cover the requirements for deploying the `kube-prometheus` monitoring tools,
as well as the necessary resources if you choose a different deployment strategy.

The `kube-prometheus` project provides manifests for a metrics stack within your Kubernetes cluster, including
an operator for Prometheus, Alert Manager, and Grafana. <%# An operator for each or one operator they all share? %>

For more information, see the [kube-prometheus project GitHub repository](https://github.com/coreos/kube-prometheus)
and the [`kube-prometheus` installation guide](https://github.com/coreos/kube-prometheus#quickstart).

Each `RabbitMQCluster` requires a `ServiceMonitor` custom resource to be deployed in its namespace.
This resource targets the `RabbitMQCluster` through a selector.

For more information about selectors, see the
[Kubernetes documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors).

Check your `RabbitMQCluster`'s labels by running:

    ```
    kubectl get service CLUSTER-ingress --show-labels
    ```

    Where `CLUSTER` is the name of your cluster.

`kubectl get` the ingress service with the `--show-labels`
flag.

For example, if your cluster name is `rabbitmq-1` run `kubectl get service rabbitmq-1-ingress --show-labels`.

See below for the corresponding `ServiceMonitor` resource to deploy for `rabbitmq-1`:

    ```
    apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      name: rabbitmq-1
      namespace: rabbitmq-1
      spec:
      endpoints:
      - interval: 15s
        port: https
      selector:
        matchLabels:
          app: rabbitmq-1
    ```

## <a id='scrape'></a> Deploying Prometheus with Scraping Annotations

Before you can deploy prometheus manually, several resources are required for Prometheus to begin scraping
metrics from your RabbitMQ cluster:

1. A `ClusterRole` permitting ‘get’ access to the ‘/metrics’ endpoint.

    ```
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: prometheus
    rules:
    - nonResourceURLs:
      - /metrics
      verbs:
      - get
    ```

2. A `ClusterRoleBinding` linking the `ClusterRole` to your Prometheus deployment’s `ServiceAccount` (note
that this could also point to the default `ServiceAccount` in the Prometheus deployment’s namespace,
however, Pivotal recommends you create a dedicated ServiceAccount for your deployment.

    ```
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: prometheus
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: prometheus
    subjects:
    - kind: ServiceAccount
      name: prometheus
      namespace: monitoring
    ```

3. To monitor a new RabbitMQCluster, add the following to the `annotations` section of your
RabbitMQCluster Cluster `CustomResource` specifications:

    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: rabbitmq-1
    spec:
      service:
        annotations:
          "prometheus.io/scrape": "true"
          "prometheus.io/port": "15692"
    ```

To monitor an existing RabbitMQCluster, edit the cluster’s ingress service YAML, add the following
annotations in the `metadata` section of the manifest:

    ```
    metadata:
       annotations:
          "prometheus.io/scrape": "true"
          "prometheus.io/port": "15692"
    ```

## <a id='grafana'></a> Monitoring dashboards with Grafana

If you are not deploying with `kube-prometheus`, you need to deploy your own Grafana resources separately.
RabbitMQ provides Grafana dashboards that integrate the scraped Prometheus metrics.
A list of official RabbitMQ Grafana dashboards can be found on the [Grafana website](https://grafana.com/orgs/rabbitmq).
To import the above Grafana dashboards, copy the dashboard ID or raw JSON of the dashboard and follow the steps
in the [Grafana documentation](https://grafana.com/docs/reference/export_import/#importing-a-dashboard)
to import them into your Grafana.
