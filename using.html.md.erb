---
title: Using Pivotal RabbitMQ for Kubernetes
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to use Pivotal RabbitMQ for Kubernetes with Pivotal Platform and Cloud Foundry.

## <a id='overview'></a> Overview

You can use RabbitMQ for Kubernetes to:

1. [Confirm Service Availability](#marketplace)
1. [Create a Service Instance](#create)
1. [Bind Your Service Instance to an App](#binding)
1. [Use the RabbitMQ Service in Your App](#use)
1. [Unbind a Service Instance From Your App](#unbind)
1. [Delete a Service Instance](#delete)

## <a id='marketplace'></a>Confirm Service Availability

For an app to use a service, the service must be available in the Marketplace for its space.

To confirm this availability:

1. Run `cf marketplace`.
1. Check that `p-rabbitmq-k8s` is in the `service` column. If it is, Pivotal RabbitMQ for Kubernetes is available. If it is not, ask your operator to install it.

    <pre class="terminal">
    $ cf marketplace
    Getting services from marketplace in org my-org / space my-space as user<span>@</span>example.com...
    OK
    service      plans         description
    [...]
    p-rabbitmq-k8s   single, ha   RabbitMQ on K8s
    [...]
    </pre>

## <a id='create'></a>Create a Service Instance

For an app to use a service, an instance of the service must exist in its space.
Services are created asynchronously, not immediately.
The `watch` command shows you when your service instance is ready to bind and use.

To create an instance of the RabbitMQ for Kubernetes service:

1. Check to see if there is an existing service by running:

    ```
    cf services
    ```
    Look for instances that have `p-rabbitmq-k8s` in the `service` column.
    If there is an existing instance that you want to use, skip to the [Bind a Service Instance to Your App](#bind) section below.
    <br><br>
    For example:
    <pre class="terminal">
    $ cf services
    Getting services in org my-org / space my-space as user<span>@</span>example.com...
    OK
    name          service          plan          bound apps    last operation
    my-instance   p-rabbitmq-k8s   ha                          create succeeded
    </pre>

1. Create the service instance by running:

    ```
    cf create-service p-rabbitmq-k8s HA SERVICE-INSTANCE
    ```

    Where:
    + `SERVICE-INSTANCE` is a name you choose to identify the service instance.
    This name appears under `name` in the output from `cf services`.
    + `HA` is the plan.
    You can replace it with any of the other plans listed in the Marketplace for the
    `p-rabbitmq-k8s` service.
    
    For example:
    
    <pre class="terminal">$ cf create-service p-rabbitmq-k8s single-node my-instance
    Creating service my-instance in org my-org / space my-space as user<span>@</span>example.com...
    OK</pre>

1. Check that the process was successful by running:

    ```
    watch cf services
    ```

    If successful, `last operation` for your instance is reported as `create succeeded`.<br><br>
    For example:
    <pre class="terminal">$ watch cf services
    Getting services in org my-org / space my-space as user<span>@</span>example.com...
    OK
    name          service        plan           bound apps    last operation
    my-instance   p-rabbitmq-k8s ha                           create succeeded
    </pre>
   If you encounter an error, contact your operator or email the team at rabbitmq-for-k8s@pivotal.io for help.
   Specifically, make sure that your Kubernetes cluster has a default storage class configured or that a correct storage class is configured in the RabbitMQ for Kubernetes Operator config map.
   
   <%# HOW DO PEOPLE CONFIGURE THE OPERATOR CONFIG MAP? CAN WE GET A LINK? WHAT IS THE CORRECT/DEFAULT STORAGE CLASS? WHAT IS A TYPICAL ERROR? WHAT COMMAND WOULD OUTPUT THIS ERROR?%>

## <a id='binding'></a> Bind Your Service Instance to an App

For an app to use a service, you must bind it to a service instance.
Do this after you push or re-push the app using `cf push`.

To bind an app to a RabbitMQ instance, run

```
cf bind-service APP SERVICE-INSTANCE
```

Where `APP` is the app you want to use the RabbitMQ service instance and `SERVICE-INSTANCE` is the name you supplied when you ran `cf create-service`.

See an example below.

<pre class="terminal">
$ cf bind-service my-app my-instance<br>
Binding service mydb to my-app in org my-org / space test as user<span>@</span>example.com...
OK
</pre>

## <a id='use'></a> Use the RabbitMQ Service in Your App

<%# CAN WE HAVE A CALL TO ACTION IN THIS SECTION? HOW DO I USE THIS INFO TO MODIFY MY APPS OR DO OTHER THINGS? DO WE NEED TO DO SOMETHING WITH CONNECTION STRINGS? CREDENTIALS?%>

Apps running in Cloud Foundry gain access to the bound service instances through an environment variable called `VCAP_SERVICES`.

Apps that have been bound to a service instance can read `VCAP_SERVICES` from their environment.
To see the `VCAP_SERVICES` for an app, run `cf env APP-NAME` with the name of an app bound to the Pivotal RabbitMQ for Kubernetes instance. An example hash is shown below:
<%# ARE THE BELOW VALUES DUMMYS? CAN BE MORE OBVIOUSLY DUMMIES %>

```json
{
    "p-rabbitmq-k8s": [{
      "binding_name": null,
      "credentials": {
          "dashboard_url": "http://10.103.52.107:15672/#/login/username/password",
          "hostname": "10.103.52.107",
          "hostnames": [
            "10.103.52.107"
          ],
          "http_api_uri": "http://username:password@10.103.52.107:15672/api/",
          "http_api_uris": [
            "http://username:password@10.103.52.107:15672/api/"
          ],
          "password": "password",
          "protocols": {
            "amqp": {
              "host": "10.103.52.107",
              "hosts": [
                "10.103.52.107"
              ],
              "password": "password",
              "port": 5672,
              "ssl": false,
              "uri": "amqp://username:password@10.103.52.107:5672/%2F",
              "uris": [
                "amqp://username:password@10.103.52.107:5672/%2F"
              ],
              "username": "username",
              "vhost": "%2F"
            },
            "management": {
              "host": "10.103.52.107",
              "hosts": [
                "10.103.52.107"
              ],
              "password": "password",
              "path": "/api/",
              "port": 15672,
              "ssl": false,
              "uri": "http://username:password@10.103.52.107:15672/api/",
              "uris": [
                "http://username:password@10.103.52.107:15672/api/"
              ],
              "username": "username"
            }
          },
          "ssl": false,
          "uri": "amqp://username:password@10.103.52.107/%2F",
          "uris": [
            "amqp://username:password@10.103.52.107/%2F"
          ],
          "username": "username",
          "vhost": "%2F"
      },
      "instance_name": "my-instance",
      "label": "p-rabbitmq-k8s",
      "name": "my-instance",
      "plan": "ha",
      "provider": null,
      "syslog_drain_url": null,
      "tags": [
        "rabbitmq",
        "amqp"
      ],
      "volume_mounts": []
    }]
}

```
  


## <a id="unbind"></a>Unbind a Service Instance From Your App

To stop an app from using a service it no longer needs, unbind it from the service instance by running:

<pre class="terminal">
$ cf unbind-service APP SERVICE-INSTANCE
</pre>

Where `APP` is the app you want to stop using the RabbitMQ service instance and `SERVICE-INSTANCE` is the name you supplied when you ran `cf create-service`.

See an example below.

<pre class="terminal">
$ cf unbind-service my-app my-instance<br>
Unbinding app my-app from service my-instance in org my-org / space my-space as user<span>@</span>example.com...
OK
</pre>

## <a id="delete"></a>Delete a Service Instance

To delete a service instance, use `cf delete-service`.

1. Run `cf delete-service SERVICE-INSTANCE`, where `SERVICE-INSTANCE` is the name of the service to delete. See an example below.
  <pre class="terminal">
   $ cf delete-service my-instance<br>
    Are you sure you want to delete the service my-instance ? y
    Deleting service my-service in org my-org / space my-space as user<span>@</span>example.com...
    OK
  </pre>

1. Run `watch cf service SERVICE-INSTANCE` and wait for a `Service instance not found` error indicating that the instance no longer exists.

You cannot delete a service instance that an app is bound to.
