---
title: Using Pivotal RabbitMQ for Kubernetes
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to use Pivotal RabbitMQ for Kubernetes.

## <a id='overview'></a> Overview

Pivotal RabbitMQ for Kubernetes is currently only used to broker messages between PCF apps.

This topic focuses on the interaction of Pivotal RabbitMQ for Kubernetes with Marketplace through PCF.

You can use RabbitMQ for Kubernetes to:

1. [Confirm Service Availability](#marketplace)
1. [Create a Service Instance](#create)
1. [Bind Your Service Instance to an App](#binding)
1. [Use the RabbitMQ Service in Your App](#use)
1. [Unbind a Service Instance From Your App](#unbind)
1. [Delete a Service Instance](#delete)

## <a id='marketplace'></a>Confirm Service Availability

For an app to use a service, the service must be available in the Marketplace for its space.

To confirm this availability:

1. Run `cf marketplace`.
1. Check that `p.rabbitmq` <%# Maybe replace all the p.rabbitmq instances %> is in the `service` column. If it is, Pivotal RabbitMQ for Kubernetes is available. If it is not, ask your operator to install it.

    <pre class="terminal">
    $ cf marketplace
    Getting services from marketplace in org my-org / space my-space as user<span>@</span>example.com...
    OK
    service      plans         description
    [...]
    p.rabbitmq   single-node   RabbitMQ service to provide dedicated instances of this high-performance multi-protocol messaging broker <%# Replace this whole line %>
    [...]
    </pre>

## <a id='create'></a>Create a Service Instance

For an app to use a service, an instance of the service must exist in its space.
On-Demand services are created asynchronously, not immediately.
The `watch` command shows you when your service instance is ready to bind and use.

You can enable TLS and additional plugins using the `cf create-service` command.
For instructions on how to modify the `cf create-service` command,
see [Enable TLS for Your Service Instance](#tls) or [Enable Optional Plugins](#optional-plugins) below.

To create an instance of the on-demand RabbitMQ for PCF service:

1. Check to see if there is an existing service by running:

    ```
    cf services
    ```
    Look for instances that have `p.rabbitmq` in the `service` column.
    If there is an existing instance that you want to use, skip to the [Bind a Service Instance to Your App](#bind) section below.
    <br><br>
    For example:
    <pre class="terminal">
    $ cf services
    Getting services in org my-org / space my-space as user<span>@</span>example.com...
    OK
    name          service      plan                   bound apps    last operation
    my-instance   p.rabbitmq   ha, single <%# Check this %>                  create succeeded
    </pre>

1. Create the service instance by running:

    ```
    cf create-service p.rabbitmq HA SERVICE-INSTANCE
    ```

    Where:
    + `SERVICE-INSTANCE` is a name you choose to identify the service instance.
    This name appears under `name` in the output from `cf services`.
    + `HA` is the plan.
    You can replace it with any of the other plans listed in the Marketplace for the
    `p.rabbitmq` service.

1. Check that the process was successful by running:

    ```
    watch cf services
    ```

    If successful, `last operation` for your instance is reported as `create succeeded`.<br><br>
    For example:
    <pre class="terminal">
      $ cf create-service p.rabbitmq single-node my-instance<br>
       Creating service my-instance in org my-org / space my-space as user<span>@</span>example.com...
       OK<br>
      $ watch cf services<br>
       Getting services in org my-org / space my-space as user<span>@</span>example.com...
       OK
       name          service        plan           bound apps    last operation
       my-instance   p.rabbitmq     ha, single <%# Check this %>                  create succeeded
    </pre>

   If you encounter an error, see [](). <%# find a link or remove %>

## <a id='binding'></a> Bind Your Service Instance to an App

For an app to use a service, you must bind it to a service instance.
Do this after you push or re-push the app using `cf push`.

To bind an app to a RabbitMQ instance, run

```
cf bind-service APP SERVICE-INSTANCE
```

Where `APP` is the app you want to use the RabbitMQ service instance and `SERVICE-INSTANCE` is the name you supplied when you ran `cf create-service`.

See an example below.

<pre class="terminal">
$ cf bind-service my-app my-instance<br>
Binding service mydb to my-app in org my-org / space test as user<span>@</span>example.com...
OK
</pre>

## <a id='use'></a> Use the RabbitMQ Service in Your App

Apps running in Cloud Foundry gain access to the bound service instances through an environment variable credentials hash called `VCAP_SERVICES`.
An example hash is shown below:

<%# Fill in example %>

Apps that have been bound to a service instance can read `VCAP_SERVICES` from their environment.
To see the `VCAP_SERVICES` for an app, run `cf env APP-NAME` with the name of an app bound to the Pivotal RabbitMQ for Kubernetes instance.


## <a id="unbind"></a>Unbind a Service Instance From Your App

To stop an app from using a service it no longer needs, unbind it from the service instance by running:

<pre class="terminal">
$ cf unbind-service APP SERVICE-INSTANCE
</pre>

Where `APP` is the app you want to stop using the RabbitMQ service instance and `SERVICE-INSTANCE` is the name you supplied when you ran `cf create-service`.

See an example below.

<pre class="terminal">
$ cf unbind-service my-app my-instance<br>
Unbinding app my-app from service my-instance in org my-org / space my-space as user<span>@</span>example.com...
OK
</pre>

## <a id="delete"></a>Delete a Service Instance

To delete a service instance, use `cf delete-service`.

1. Run `cf delete-service SERVICE-INSTANCE`, where `SERVICE-INSTANCE` is the name of the service to delete. See an example below.
  <pre class="terminal">
   $ cf delete-service my-instance<br>
    Are you sure you want to delete the service my-instance ? y
    Deleting service my-service in org my-org / space my-space as user<span>@</span>example.com...
    OK
  </pre>

1. Run `watch cf service SERVICE-INSTANCE` and wait for a `Service instance not found` error indicating that the instance no longer exists.

You cannot delete a service instance that an app is bound to.
