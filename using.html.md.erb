
---
title: Using Pivotal RabbitMQ for Kubernetes
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to use <%= vars.product_full %> using standard Kubernetes tooling (kubectl and YAML).
If you want to use it with Pivotal Platform and Cloud Foundry, please refer to [Using with Pivotal Platform](using-servicebroker.html) instead.

## <a id='overview'></a> Overview

## <a id='availability'></a>Confirm Service Availability

For an app to use a service, the service must be available in the Marketplace for its space.

To confirm this availability:

1. Run `kubectl get customresourcedefinitions.apiextensions.k8s.io`.
1. Check that `rabbitmqclusters.rabbitmq.pivotal.io` is on the list. If it is, <%= vars.product_short %> is available. If it is not, ask your operator to install it.

    <pre class="terminal">
    $ kubectl get customresourcedefinitions.apiextensions.k8s.io
    NAME                                   CREATED AT
    rabbitmqclusters.rabbitmq.pivotal.io   2019-10-23T10:11:06Z
    </pre>

## <a id='create'></a>Create a RabbitMQ instance

To create a RabbitMQ instance, you need to create a `RabbitmqCluster` resource definition and apply it.
RabbitMQ Operator will create the necessary resources (services, statefulset, etc) in the same namespace
that the `RabbitmqCluster` was defined.

1. Create a YAML file to describe a RabbitmqCluster resource (eg. `simple.yaml`). The simplest definition looks like this:
    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: simple
   ```
1. Apply the definition using `kubectl`:

    ```
    kubectl apply -f simple.yaml
    ```

1. Check that the process was successful by running:

    ```
    kubectl get all -l app=simple
    ```

    If successful, you should see a running pod and a service that exposes the instance.<br><br>
    For example:
    <pre class="terminal">
    $ kubectl get all -l app=simple
    NAME                           READY   STATUS    RESTARTS   AGE
    pod/simple-rabbitmq-server-0   1/1     Running   0          112s

    NAME                               TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                        AGE
    service/simple-rabbitmq-headless   ClusterIP   None             <none>        4369/TCP                       113s
    service/simple-rabbitmq-ingress    ClusterIP   10.103.214.196   <none>        5672/TCP,15672/TCP,15692/TCP   113s
    </pre>

    Please refer to the [Troubleshooting guide](./troubleshooting.html#failed-instance) if the pod is not running within a few minutes.
    If you cannot solve the problem, contact your operator or email the team at rabbitmq-for-k8s@pivotal.io for help.

## <a id='configure'></a>Configure a RabbitMQ instance

`RabbitmqCluster` definition may include multiple additional settings. When these settings are not specified, [Operator configuration](configuring.html) provides default values.

Here's an example with all settings specified explicitly:

```
apiVersion: rabbitmq.pivotal.io/v1beta1
kind: RabbitmqCluster
metadata:
  name: rabbitmqcluster-sample
spec:
  replicas: 3
  service:
    type: LoadBalancer
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
  image: rabbitmq:3.8
  imagePullSecret: some-secret
  persistence:
    storageClassName: fast
    storage: 20Gi
```

## <a id='connect'></a> Connect an App to RabbitMQ

For an app to use RabbitMQ, you must configure it with the correct service name and credentials.

The service name is `INSTANCE-rabbitmq-ingress` in the namespace where RabbitMQ is deployed, where INSTANCE is the name of your instance.
For example, for the `RabbitmqCluster` created [in the section above](#create), the service name is `simple-rabbitmq-ingress`.

Admin credentials for a RabbitMQ cluster are stored in a Kubernetes secret called `INSTANCE-rabbitmq-admin`. Kubernetes encodes secrets using base64.
To retrieve credentials, and display them in plain-text, run the following command:
```
# display the username
kubectl -n NAMESPACE get secret INSTANCE-rabbitmq-admin -o jsonpath="{.data.rabbitmq-username}" | base64 --decode
# display the password
kubectl - NAMESPACE get secret INSTANCE-rabbitmq-admin -o jsonpath="{.data.rabbitmq-password}" | base64 --decode
```

Where `INSTANCE` is the name if your `RabbitmqCluster` and `NAMESPACE` is the Kubernetes namespace it is located in.

See an example below.

<pre class="terminal">
$ kubectl get secret simple-rabbitmq-admin -o jsonpath="{.data.rabbitmq-username}" | base64 --decode
DbjXnPjLt82DbZC-xr5i_UiBx7nDRRqI
$ kubectl get secret simple-rabbitmq-admin -o jsonpath="{.data.rabbitmq-password}" | base64 --decode
SB6sezvZfSR4Yu36KC2n8dokmFcCXLWv
</pre>

## <a id='use'></a> Use the RabbitMQ Service in Your App

Please follow [RabbitMQ tutorials](https://www.rabbitmq.com/getstarted.html) to start using RabbitMQ in your applications.

## <a id="delete"></a>Delete a RabbitMQ Instance

To delete a service instance, use `kubectl delete rabbitmqcluster INSTANCE` or `kubectl delete -f INSTANCE.yaml`

For example:
<pre class="terminal">
$ kubectl delete rabbitmqclusters.rabbitmq.pivotal.io simple
rabbitmqcluster.rabbitmq.pivotal.io "simple" deleted
</pre>

or

<pre class="terminal">
$ kubectl delete -f simple.yaml
rabbitmqcluster.rabbitmq.pivotal.io "simple" deleted
</pre>
