---
title: Using Pivotal RabbitMQ for Kubernetes
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to use <%= vars.product_full %> with Pivotal Platform and Cloud Foundry.

## <a id='overview'></a> Overview

You can use <%= vars.product_short %> to:

1. [Confirm Service Availability](#marketplace)
1. [Create a Service Instance](#create)
1. [Bind Your Service Instance to an App](#binding)
1. [Use the RabbitMQ Service in Your App](#use)
1. [Unbind a Service Instance From Your App](#unbind)
1. [Delete a Service Instance](#delete)

## <a id='marketplace'></a>Confirm Service Availability

For an app to use <%= vars.product_short %>, the product must be deployed to your Kubernetes cluster.

To confirm this availability:

1. Run `kubectl get customresourcedefinitions.apiextensions.k8s.io`.
1. Check that `rabbitmqclusters.rabbitmq.pivotal.io` is on the list, as in the example below.

    <pre class="terminal">
    $ cf marketplace
    Getting services from marketplace in org my-org / space my-space as user<span>@</span>example.com...
    OK
    service      plans         description
    [...]
    p-rabbitmq-k8s   single, ha   RabbitMQ on K8s
    [...]
    </pre>

    If it is, <%= vars.product_short %> is available. If it is not, ask your operator to install it by following the steps in [Installing and Configuring Using CNAB](./installing-cnab.html) or [Installing and Configuring Using Kubernetes Manifests](./installing.html).

## <a id='create'></a> Create a RabbitMQ instance

To create a RabbitMQ instance, you need to create a `RabbitmqCluster` resource definition and apply it.
RabbitMQ Operator will create the necessary resources (such as `services`, `statefulset`) in the same namespace
in which the `RabbitmqCluster` was defined.

1. Create a YAML file to describe a RabbitmqCluster resource, for example, `simple.yaml`. The simplest definition looks like this:

    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: simple
   ```

1. Apply the definition by running:

    ```
    cf services
    ```
    Look for instances that have `p-rabbitmq-k8s` in the `service` column.
    If there is an existing instance that you want to use, skip to the [Bind a Service Instance to Your App](#bind) section below.
    <br><br>
    For example:
    <pre class="terminal">
    $ cf services
    Getting services in org my-org / space my-space as user<span>@</span>example.com...
    OK
    name          service          plan          bound apps    last operation
    my-instance   p-rabbitmq-k8s   ha                          create succeeded
    </pre>

1. Create the service instance by running:

    ```
    cf create-service p-rabbitmq-k8s HA SERVICE-INSTANCE
    ```

    Where:
    + `SERVICE-INSTANCE` is a name you choose to identify the service instance.
    This name appears under `name` in the output from `cf services`.
    + `HA` is the plan.
    You can replace it with any of the other plans listed in the Marketplace for the
    `p-rabbitmq-k8s` service.

    For example:

    Please refer to [Troubleshooting Pivotal RabbitMQ for Kubernetes](./troubleshooting.html#failed-instance) if the pod is not running within a few minutes.
    If you cannot solve the problem, please contact your operator or email <%# insert general Pivotal support email address. %>.

1. Check that the process was successful by running:

The `RabbitmqCluster` definition might include multiple additional settings. When these settings are not specified, [Operator configuration](configuring.html) provides default values.

Here is an example with all settings specified explicitly:

  ```
  apiVersion: rabbitmq.pivotal.io/v1beta1
  kind: RabbitmqCluster
  metadata:
    name: rabbitmqcluster-sample
  spec:
    replicas: 3
    service:
      type: LoadBalancer
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
    image: rabbitmq:3.8
    imagePullSecret: some-secret
    persistence:
      storageClassName: fast
      storage: 20Gi
  ```

These properties are described in [Configuring Pivotal RabbitMQ for Kubernetes](./configuring.html).


## <a id='binding'></a> Bind Your Service Instance to an App

For an app to use a service, you must bind it to a service instance.
Do this after you push or re-push the app using `cf push`.

The service name is `INSTANCE-rabbitmq-ingress` in the namespace where RabbitMQ is deployed, where `INSTANCE` is the name of your instance.
For example, for the `RabbitmqCluster` created [in the section above](#create), the service name is `simple-rabbitmq-ingress`.

Admin credentials for a RabbitMQ cluster are stored in a Kubernetes secret called `INSTANCE-rabbitmq-admin`. Kubernetes encodes secrets using base64.
To retrieve credentials, and display them in plain-text, run the following command:

  <pre class="terminal">
  # display the username
  kubectl -n NAMESPACE get secret INSTANCE-rabbitmq-admin -o jsonpath="{.data.rabbitmq-username}" | base64 --decode
  # display the password
  kubectl -n NAMESPACE get secret INSTANCE-rabbitmq-admin -o jsonpath="{.data.rabbitmq-password}" | base64 --decode
  </pre>

Where `INSTANCE` is the name of your `RabbitmqCluster` and `NAMESPACE` is the Kubernetes namespace it is located in.

See an example below.

  <pre class="terminal">
  $ kubectl get secret simple-rabbitmq-admin -o jsonpath="{.data.rabbitmq-username}" | base64 --decode
  DbjXnPjLt82DbZC-xr5i_UiBx7nDRRqI
  $ kubectl get secret simple-rabbitmq-admin -o jsonpath="{.data.rabbitmq-password}" | base64 --decode
  SB6sezvZfSR4Yu36KC2n8dokmFcCXLWv
  </pre>

## <a id='use'></a> Use the RabbitMQ Service in Your App

Please follow [RabbitMQ tutorials](https://www.rabbitmq.com/getstarted.html) to start using RabbitMQ in your apps.

## <a id="delete"></a> Delete a RabbitMQ Instance

## <a id="unbind"></a>Unbind a Service Instance From Your App

To stop an app from using a service it no longer needs, unbind it from the service instance by running:

<pre class="terminal">
$ cf unbind-service APP SERVICE-INSTANCE
</pre>

Where `INSTANCE` is the name of your `RabbitmqCluster`.

For example:

  <pre class="terminal">
  $ kubectl delete rabbitmqclusters.rabbitmq.pivotal.io simple
  rabbitmqcluster.rabbitmq.pivotal.io "simple" deleted
  </pre>

Where `APP` is the app you want to stop using the RabbitMQ service instance and `SERVICE-INSTANCE` is the name you supplied when you ran `cf create-service`.

See an example below.

  <pre class="terminal">
  $ kubectl delete -f simple.yaml
  rabbitmqcluster.rabbitmq.pivotal.io "simple" deleted
  </pre>
