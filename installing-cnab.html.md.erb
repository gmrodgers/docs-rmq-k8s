---
title: Installing and Configuring Using CNAB
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to install and configure <%= vars.product_name %>
using Cloud Native Application Bundle (CNAB).

There are two methods to install <%= vars.product_name %>. Use one of the following:

* **Kubernetes Manifests:** This method requires manually editing YAML but is more flexible than the CNAB method. Pivotal recommends this method for advanced users.
For instructions, see [Installing and Configuring Using Kubernetes Manifests](./installing.html).
* **CNAB:** This method uses CNAB to automate the installation process.
For information about CNAB, see [Cloud Native Application Bundle](https://cnab.io).

## <a id='prerequisites'></a> Prerequisites

Before you install and configure <%= vars.product_name %>, you must install and configure:

1. **kubectl:** For installation instructions, see [Install and Set Up kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/) in the Kubernetes documentation.

1. **The Docker CLI:** For installation instructions, see the [Docker documentation](https://docs.docker.com/install/).

1. **Duffle:** For installation instructions, see [duffle](https://github.com/deislabs/duffle) on GitHub. <%# should we say install the latest version of duffle %>

1. **A Kubernetes cluster:** You must use Kubernetes v1.14 or later

1. **A private registry:** Pivotal recommends that you keep the CNAB, operator, and
service-broker images private if your repository is publicly accessible.
If you do not have access to a private registry, email the team at
rabbitmq-for-k8s@pivotal.io for help.

## <a id='overview'></a> Overview

To install and configure <%= vars.product_name %>:

1. [Download and Import Pivotal RabbitMQ for Kubernetes](#import)
2. [Configure Kubernetes Cluster Access to your Private Registry](#generate-credentials)
3. [Move the Images](#relocate-images)
4. [Install the CNAB Bundle](#install)
5. [Verify the Installation](#verify)

## <a id='import'></a>Download and Import Pivotal RabbitMQ for Kubernetes

<p class="note">
  <strong>Note:</strong>
  RabbitMQ for Kubernetes is currently visible to selected customers only.
  Email the team at <a href="mailto:rabbitmq-for-k8s@pivotal.io">rabbitmq-for-k8s@pivotal.io</a> if you want access.
  Otherwise, you see a 404 error.
</p>

To download and import <%= vars.product_name %>:

1. Sign in to [Pivotal Network](https://login.run.pivotal.io/login).

1. Download the <%= vars.product_name %> CNAB artifact from [Pivotal Network](https://network.pivotal.io/products/p-rabbitmq-for-kubernetes/).

1. Extract the tarball that you downloaded to gain access to `bundle.json` by running:

    ```
    duffle import rabbitmq-for-kubernetes-cnab-VERSION.tgz
    ```
    Where `VERSION` is the version of <%= vars.product_name %> that you downloaded.
    <br><br>
    For example:

    <pre class="terminal">
      $ duffle import rabbitmq-for-kubernetes-cnab-0.4.0-build.32.tgz
    </pre>

## <a id='generate-credentials'></a>Configure Kubernetes Cluster Access to your Private Registry

To generate credentials to grant the Kubernetes cluster access to images in your private registry:

1. Run the following command:

    ```
    duffle credentials generate rabbitmq-creds \
     -f rabbitmq-for-kubernetes-cnab-VERSION/bundle.json
    ```

    Where `VERSION` is the version of <%= vars.product_name %> that you downloaded.
    <p class="note"><strong>Note:</strong>
     For more options on how to generate duffle credentials, run <code>duffle credentials --help</code>.
    </p>

    <pre class="terminal">
      $ duffle credentials generate rabbitmq-creds \
       -f rabbitmq-for-kubernetes-cnab-0.4.0-build.32/bundle.json
    </pre>

1. When prompted, enter the following:
    * The absolute path to the kubeconfig that points to your target Kubernetes cluster
    * The URL for the docker registry server
    * The docker registry username and password

## <a id='relocate-images'></a>Move the Images

To move the images to your private registry:

1. Run the following command:

    ```
    duffle relocate rabbitmq-for-kubernetes-cnab-VERSION.tgz -f \
      --repository-prefix=REGISTRY-HOST/ACCOUNT-NAME \
      --relocation-mapping=relmap.json
    ```

    Where:
    * `REGISTRY-HOST` is the hostname for your private registry
    * `ACCOUNT-NAME` is the account name of your private registry

    For example:

    <pre class="terminal">
      $ duffle relocate -f rabbitmq-for-kubernetes-cnab-0.4.0-build.32.tgz \
        --repository-prefix=eu.gcr.io/my-account \
        --relocation-mapping=relmap.json
      writing registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq-for-kubernetes-cnab@sha256:550991eea3412ff9360adf2cf157bee6bfe935bb48923e920fb9366d6e42d6a2 to eu.gcr.io/my-account/p-rabbitmq-for-kubernetes-staging-rabbitmq-for-kubernetes-cnab-0839b8b2055a4de05b31712c67e2eb52@sha256:550991eea3412ff9360adf2cf157bee6bfe935bb48923e920fb9366d6e42d6a2
      writing registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq@sha256:6709cafde00784361b231f6c94b6dbecb8fefd3d3195676ed81823e007e37449 to eu.gcr.io/my-account/p-rabbitmq-for-kubernetes-staging-rabbitmq-228ecdc119f602d199fa39cc0326057e@sha256:6709cafde00784361b231f6c94b6dbecb8fefd3d3195676ed81823e007e37449
      writing registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq-for-kubernetes-operator@sha256:25c5b9693c6b23f3f18f91dd43a13c20d60210d47efe239c151d801c59575979 to eu.gcr.io/my-account/p-rabbitmq-for-kubernetes-staging-rabbitmq-for-kubernetes-operator-6cce6b962354fbbcdcc03a91055eb7d3@sha256:25c5b9693c6b23f3f18f91dd43a13c20d60210d47efe239c151d801c59575979
      writing registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq-for-kubernetes-servicebroker@sha256:a36eb92cf2152c13c9cb420bc46722c8499d2b1bcdf0f84bb1549c6b93e83822 to eu.gcr.io/my-account/p-rabbitmq-for-kubernetes-staging-rabbitmq-for-kubernetes-servicebroker-180ccfcfb779e0c8b093dd44ae168157@sha256:a36eb92cf2152c13c9cb420bc46722c8499d2b1bcdf0f84bb1549c6b93e83822
    </pre>

    <p class="note"><strong>Note:</strong>
      <code>--relocation-mapping</code> specifies the name of the file that is
      created to store relocation mappings.
    </p>

## <a id='install'></a>Install the CNAB Bundle

To install the CNAB bundle:

1. Ensure that your Kubernetes authentication token has not expired by running:

    ```
    kubectl get nodes
    ```
<%# what would you see if the auth has/hasn't expired? %>

1. Run the following command:

    ```
    duffle install rabbitmq rabbitmq-for-kubernetes-cnab-VERSION.tgz -f \
      --relocation-mapping=relmap.json \
      --credentials rabbitmq-creds \
      --set broker_username=BROKER-USERNAME \
      --set broker_password=BROKER-PASSWORD
    ```

    Where:
    * `BROKER-USERNAME` is a username you specify for your broker
    * `BROKER-PASSWORD` is a password you specify for your broker

    For example:

    <pre class="terminal">
      $ duffle install rabbitmq rabbitmq-for-kubernetes-0.4.0-build.32.tgz -f \
        --relocation-mapping=relmap.json \
        --credentials rabbitmq-creds \
        --set broker_username=user1 \
        --set broker_password=password123 \
      Executing install action...
      + action=install
      + name=rabbitmq
      + case ${action} in
      + kubectl apply -f /cnab/app/manifests/namespace.yaml
      namespace/pivotal-rabbitmq-system created
      + [[ -n _json_key ]]
      + [[ -n {
        "type": "service_account",
        "project_id": "my-account",
        "private_key_id": "abc123",
        "private_key": "-----BEGIN PRIVATE KEY----- ... -----END PRIVATE KEY-----\n",
        "client_email": "gcr@my-account.iam.gserviceaccount.com",
        "client_id": "1234",
        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
        "token_uri": "https://oauth2.googleapis.com/token",
        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/gcr%40my-account.iam.gserviceaccount.com"
      }
      ]]
      + echo 'Creating Registry Secret'
      Creating Registry Secret
      + kubectl -n pivotal-rabbitmq-system create secret docker-registry p-rmq-registry-access --docker-server=eu.gcr.io/my-account --docker-username=_json_key '--docker-password={
        "type": "service_account",
        "project_id": "my-account",
        "private_key_id": "abc1234",
        "private_key": "-----BEGIN PRIVATE KEY----- ... -----END PRIVATE KEY-----\n",
        "client_email": "gcr@my-account.iam.gserviceaccount.com",
        "client_id": "1234",
        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
        "token_uri": "https://oauth2.googleapis.com/token",
        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/gcr%40my-account.iam.gserviceaccount.com"
      }
      '
      secret/p-rmq-registry-access created
      + echo 'Installing RabbitMQ for Kubernetes Operator'
      + bash /cnab/app/install_operator
      Installing RabbitMQ for Kubernetes Operator

      ---
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: p-rmq-operator-config
        namespace: pivotal-rabbitmq-system
      data:
        CONFIG: |
          SERVICE:
            TYPE: ""
            ANNOTATIONS:

          PERSISTENCE:
            STORAGE_CLASS_NAME:
            STORAGE:
          IMAGE_URL: eu.gcr.io/my-account/p-rabbitmq-for-kubernetes-staging-rabbitmq-228ecdc119f602d199fa39cc0326057e@sha256:6709cafde00784361b231f6c94b6dbecb8fefd3d3195676ed81823e007e37449
          IMAGE_PULL_SECRET: p-rmq-registry-access
      configmap/p-rmq-operator-config created
      customresourcedefinition.apiextensions.k8s.io/rabbitmqclusters.rabbitmq.pivotal.io created
      Changes

      Namespace                Name                        Kind                Conds.  Age  Op      Wait to    Rs  Ri
      -                        p-rmq-operator-role         ClusterRole         -       -    create  reconcile  -   -
      ~                        p-rmq-operator-rolebinding  ClusterRoleBinding  -       -    create  reconcile  -   -
      pivotal-rabbitmq-system  p-rmq-operator              Deployment          -       -    create  reconcile  -   -

      Op:      3 create, 0 delete, 0 update, 0 noop
      Wait to: 3 reconcile, 0 delete, 0 noop

      12:02:28PM: ---- applying 3 changes [0/3 done] ----
      12:02:28PM: create clusterrole/p-rmq-operator-role (rbac.authorization.k8s.io/v1) cluster
      12:02:28PM: create clusterrolebinding/p-rmq-operator-rolebinding (rbac.authorization.k8s.io/v1) cluster
      12:02:28PM: create deployment/p-rmq-operator (apps/v1) namespace: pivotal-rabbitmq-system
      12:02:28PM: ---- waiting on 3 changes [0/3 done] ----
      12:02:28PM: ok: reconcile clusterrole/p-rmq-operator-role (rbac.authorization.k8s.io/v1) cluster
      12:02:28PM: ok: reconcile clusterrolebinding/p-rmq-operator-rolebinding (rbac.authorization.k8s.io/v1) cluster
      12:02:28PM: ongoing: reconcile deployment/p-rmq-operator (apps/v1) namespace: pivotal-rabbitmq-system
      12:02:28PM:  ^ Waiting for 1 unavailable replicas
      12:02:28PM:  L ok: waiting on replicaset/p-rmq-operator-6c5b99ccd4 (apps/v1) namespace: pivotal-rabbitmq-system
      12:02:28PM:  L ongoing: waiting on pod/p-rmq-operator-6c5b99ccd4-jds84 (v1) namespace: pivotal-rabbitmq-system
      12:02:28PM:     ^ Pending: ContainerCreating
      12:02:28PM: ---- waiting on 1 changes [2/3 done] ----
      12:02:38PM: ok: reconcile deployment/p-rmq-operator (apps/v1) namespace: pivotal-rabbitmq-system
      12:02:38PM: ---- applying complete [3/3 done] ----
      12:02:38PM: ---- waiting complete [3/3 done] ----

      Succeeded
      + echo 'Installing RabbitMQ for Kubernetes Broker'
      + bash /cnab/app/install_broker
      Installing RabbitMQ for Kubernetes Broker
      secret/p-rmq-servicebroker-admin created
      Changes

      Namespace                Name                             Kind                Conds.  Age  Op      Wait to    Rs  Ri
      -                        p-rmq-servicebroker-role         ClusterRole         -       -    create  reconcile  -   -
      ~                        p-rmq-servicebroker-rolebinding  ClusterRoleBinding  -       -    create  reconcile  -   -
      pivotal-rabbitmq-system  p-rmq-servicebroker              Deployment          -       -    create  reconcile  -   -
      ~                        p-rmq-servicebroker-ingress      Service             -       -    create  reconcile  -   -

      Op:      4 create, 0 delete, 0 update, 0 noop
      Wait to: 4 reconcile, 0 delete, 0 noop

      12:02:38PM: ---- applying 4 changes [0/4 done] ----
      12:02:38PM: create clusterrole/p-rmq-servicebroker-role (rbac.authorization.k8s.io/v1) cluster
      12:02:38PM: create clusterrolebinding/p-rmq-servicebroker-rolebinding (rbac.authorization.k8s.io/v1) cluster
      12:02:38PM: create service/p-rmq-servicebroker-ingress (v1) namespace: pivotal-rabbitmq-system
      12:02:38PM: create deployment/p-rmq-servicebroker (apps/v1) namespace: pivotal-rabbitmq-system
      12:02:38PM: ---- waiting on 4 changes [0/4 done] ----
      12:02:38PM: ok: reconcile clusterrole/p-rmq-servicebroker-role (rbac.authorization.k8s.io/v1) cluster
      12:02:38PM: ok: reconcile clusterrolebinding/p-rmq-servicebroker-rolebinding (rbac.authorization.k8s.io/v1) cluster
      12:02:38PM: ok: reconcile service/p-rmq-servicebroker-ingress (v1) namespace: pivotal-rabbitmq-system
      12:02:38PM: ongoing: reconcile deployment/p-rmq-servicebroker (apps/v1) namespace: pivotal-rabbitmq-system
      12:02:38PM:  ^ Waiting for 1 unavailable replicas
      12:02:38PM:  L ok: waiting on replicaset/p-rmq-servicebroker-58949574b5 (apps/v1) namespace: pivotal-rabbitmq-system
      12:02:38PM:  L ongoing: waiting on pod/p-rmq-servicebroker-58949574b5-jdbcz (v1) namespace: pivotal-rabbitmq-system
      12:02:38PM:     ^ Pending: ContainerCreating
      12:02:38PM: ---- waiting on 1 changes [3/4 done] ----
      12:02:45PM: ok: reconcile deployment/p-rmq-servicebroker (apps/v1) namespace: pivotal-rabbitmq-system
      12:02:45PM: ---- applying complete [4/4 done] ----
      12:02:45PM: ---- waiting complete [4/4 done] ----

      Succeeded
    </pre>

    The <code>set</code> flag refers to CNAB parameters that configure your CNAB installation.
    The table below lists the RabbitMQ for Kubernetes CNAB parameters that are
    available to use with the `--set` flag.

    <p class="note"><strong>Note:</strong>
      You can also pass CNAB parameters using a JSON file with the <code>--parameters FILENAME</code> flag.
    </p>

    <table>
      <tr>
        <th width="35%">Parameter</th>
        <th width="65%">Description</th>
      </tr>
      <tr>
        <td><code>broker_username</code></td>
        <td>Username for the service broker</td>
      </tr>
      <tr>
        <td><code>broker_password</code></td>
        <td>Password for the service broker</td>
      </tr>
      <tr>
        <td>(Optional) <code>rabbitmq_service_type</code></td>
        <td>
          Kubernetes service type for the RabbitmqCluster service.
          Available values are:
          <ul>
            <li><code>ClusterIP</code></li>
            <li><code>NodePort</code></li>
            <li><code>LoadBalance</code></li>
          </ul>
        </td>
      </tr>
      <tr>
        <td>(Optional) <code>broker_service_type</code></td>
        <td>
          Kubernetes Service type for the service broker.
          Available values are:
          <ul>
            <li><code>ClusterIP</code></li>
            <li><code>NodePort</code></li>
            <li><code>LoadBalance</code></li>
          </ul>
        </td>
      </tr>
      <tr>
        <td>(Optional) <code>service_annotations</code></td>
        <td>
          Kubernetes annotations for service metadata such as for IaaS configuration.
          If the configuration you want requires multiple key-value pairs,
          add them as a <code>\n</code> separated string. <br>For example:
          <code>--set service_annotations="service.k8s.io/cert: arn:aws:acm:us-east-1\nservice.k8s.io/ports: 443,889"</code>
        </td>
      </tr>
      <tr>
        <td>(Optional) <code>storage_class_name</code></td>
        <td>Name of the Kubernetes StorageClass to use for provisioning RabbitmqCluster PersistentVolumes</td>
      </tr>
      <tr>
        <td>(Optional) <code>storage_capacity</code></td>
        <td>Capacity set in the RabbitmqCluster PersistentVolumeClaims</td>
      </tr>
    </table>

## <a id='register'></a>(Optional) Register the Service Broker with Cloud Foundry

The service broker is an optional component that allows integration with Cloud Foundry,
such as <%= vars.app_runtime %>.

To register the service broker:

1. Log in to the cf CLI.

1. Run the following command:

    ```
    cf create-service-broker SERVICE-BROKER-NAME BROKER-USERNAME BROKER-PASSWORD https://IP-ADDRESS:8080
    ```

    Where:
    * `SERVICE-BROKER-NAME` is
    * `BROKER-USERNAME` is
    * `BROKER-PASSWORD` is
    * `IP-ADDRESS` is

    For example:

    <pre class="terminal">
      ~$ cf create-service-broker rabbitmq-for-k8s BROKER-USERNAME BROKER-PASSWORD http://12.13.14.15:8080
      OK
    </pre>
    
<p class="note">
  <strong>Note:</strong>
  To register a service broker this way, you need to be logged in as Cloud Foundry admin.
  If you want, you can register a space-scoped service broker as a normal user by adding <code>--space-scoped</code> parameter to the command above.
</p>

For more information about registering service brokers,
see [Register a Broker in Cloud Foundry documentation](https://docs.cloudfoundry.org/services/managing-service-brokers.html#register-broker).

## <a id='troubleshooting'></a>Troubleshooting the Installation

The steps below allow you to verify the installation and to provision an instance without registering the service broker with <%= vars.app_runtime %>.

1. Verify the operator and broker have been installed successfully and get the
address for the broker from the service object by running:

    ```
    kubectl -n pivotal-rabbitmq-system get services
    ```
    For example:

    <pre class="terminal">
      $ kubectl -n pivotal-rabbitmq-system get services
      NAME                          TYPE           CLUSTER-IP     EXTERNAL-IP    PORT(S)          AGE
      p-rmq-servicebroker-ingress   LoadBalancer   10.109.111.3   172.17.255.1   8080:30444/TCP   58m
    </pre>

1. View the catalog to confirm the service and plan IDs:

    ```
    curl -H "X-Broker-API-Version: 2.14" \
      -H "Content-Type: application/json" \
      BROKER-USERNAME:BROKER-PASSWORD@IP-ADDRESS:8080/v2/catalog
    ```

    Where:
    * `BROKER-USERNAME` is the `broker_username` you specified in the `duffle install` command above
    * `BROKER-PASSWORD` is the `broker_password` you specified in the `duffle install` command above
    * `IP-ADDRESS` is found in the output of `kubectl get services` command

    For example:

    <pre class="terminal">
      $ curl -H "X-Broker-API-Version: 2.14"   -H "Content-Type: application/json"   BROKER-USERNAME:BROKER-PASSWORD@p-rmq-servicebroker-ingress:8080/v2/catalog
      {"services":[{"id":"00000000-0000-0000-0000-000000000000","name":"p-rabbitmq-k8s","description":"RabbitMQ on K8s","bindable":true,"tags":["rabbitmq","amqp"],"plan_updateable":false,"plans":[{"id":"22222222-2222-2222-2222-222222222222","name":"single","description":"Single-node RabbitMQ on K8s"},{"id":"33333333-3333-3333-3333-333333333333","name":"ha","description":"3-node RabbitMQ on K8s"}]}]}
    </pre>

1. Provision a service instance by running:

    ```
    curl -X PUT -H "X-Broker-API-Version: 2.14" \
      -H "Content-Type: application/json" \
      BROKER-USERNAME:BROKER-PASSWORD@IP-ADDRESS:8080/v2/service_instances/INSTANCE-NAME?accepts_incomplete=true -d '{
      "service_id": "00000000-0000-0000-0000-000000000000",
      "plan_id": "22222222-2222-2222-2222-222222222222"
    }'
    ```

    Where is `INSTANCE-NAME` is a name you define for your instance.
    <br><br>
    For example:

    <pre class="terminal">
      $ curl -X PUT -H "X-Broker-API-Version: 2.14" \
        -H "Content-Type: application/json" \
        user1:password123@10.25.18.2:8080/v2/service_instances/instance-1?accepts_incomplete=true -d '{
        "service_id": "00000000-0000-0000-0000-000000000000",
        "plan_id": "22222222-2222-2222-2222-222222222222"
      }'
      {}
    </pre>

1. Retrieve the instance ID by running:

    ```
    kubectl get namespaces
    ```
<%# how do they know which namespace is the instance ID to use? also get example. %>
1. Verify the RabbitMQ cluster has been created by running:

    ```
    kubectl -n p-rmq-INSTANCE-ID get all
    ```
    Where is `INSTANCE-ID` is the name you specified in the step above.
    <br><br>
    For example:

    <pre class="terminal">
      $ kubectl -n p-rmq-instance-1 get all
      NAME                            READY   STATUS    RESTARTS   AGE
      pod/pivotal-rabbitmq-server-0   1/1     Running   0          2m27s

      NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                        AGE
      service/pivotal-rabbitmq-headless   ClusterIP   None             <none>        4369/TCP                       2m27s
      service/pivotal-rabbitmq-ingress    ClusterIP   10.111.202.183   <none>        5672/TCP,15672/TCP,15692/TCP   2m28s

      NAME                                       READY   AGE
      statefulset.apps/pivotal-rabbitmq-server   1/1     2m28s
    </pre>

<%# the uninstall section should be on the upgrade page as an upgrade step -- you have to uninstall this before you install the next version

## <a id='uninstall'></a>Uninstall Bundle

If you want to uninstall the product, run the following command:
```
duffle uninstall rabbitmq --credentials rabbitmq-creds --relocation-mapping=relmap.json
```

For example:
    <pre class="terminal">
      $ duffle uninstall rabbitmq --credentials rabbitmq-creds --relocation-mapping relmap.json
      Executing uninstall action...
      + action=uninstall
      + name=rabbitmq
      + case ${action} in
      + kapp delete -n pivotal-rabbitmq-system --yes -a rabbitmq-operator
      Changes

      Namespace                Name                             Kind                Conds.  Age  Op      Wait to  Rs  Ri
      -                        p-rmq-operator-role              ClusterRole         -       1h   delete  delete   ok  -
      ~                        p-rmq-operator-rolebinding       ClusterRoleBinding  -       1h   delete  delete   ok  -
      pivotal-rabbitmq-system  p-rmq-operator                   Deployment          2/2 t   1h   delete  delete   ok  -
      ~                        p-rmq-operator-5d76f588dd        ReplicaSet          -       1h   -       delete   ok  -
      ~                        p-rmq-operator-5d76f588dd-fs4nf  Pod                 4/4 t   1h   -       delete   ok  -

      Op:      0 create, 3 delete, 0 update, 2 noop
      Wait to: 0 reconcile, 5 delete, 0 noop

      2:28:42PM: ---- applying 5 changes [0/5 done] ----
      2:28:42PM: delete clusterrole/p-rmq-operator-role (rbac.authorization.k8s.io/v1) cluster
      2:28:42PM: delete deployment/p-rmq-operator (apps/v1) namespace: pivotal-rabbitmq-system
      2:28:42PM: delete clusterrolebinding/p-rmq-operator-rolebinding (rbac.authorization.k8s.io/v1) cluster
      2:28:42PM: noop replicaset/p-rmq-operator-5d76f588dd (apps/v1) namespace: pivotal-rabbitmq-system
      2:28:42PM: noop pod/p-rmq-operator-5d76f588dd-fs4nf (v1) namespace: pivotal-rabbitmq-system
      2:28:42PM: ---- waiting on 5 changes [0/5 done] ----
      2:28:42PM: ok: delete clusterrole/p-rmq-operator-role (rbac.authorization.k8s.io/v1) cluster
      2:28:42PM: ok: delete deployment/p-rmq-operator (apps/v1) namespace: pivotal-rabbitmq-system
      2:28:42PM: ok: delete clusterrolebinding/p-rmq-operator-rolebinding (rbac.authorization.k8s.io/v1) cluster
      2:28:42PM: ongoing: delete replicaset/p-rmq-operator-5d76f588dd (apps/v1) namespace: pivotal-rabbitmq-system
      2:28:42PM: ongoing: delete pod/p-rmq-operator-5d76f588dd-fs4nf (v1) namespace: pivotal-rabbitmq-system
      2:28:42PM: ---- waiting on 2 changes [3/5 done] ----
      2:28:43PM: ok: delete replicaset/p-rmq-operator-5d76f588dd (apps/v1) namespace: pivotal-rabbitmq-system
      2:28:43PM: ---- waiting on 1 changes [4/5 done] ----
      2:28:45PM: ok: delete pod/p-rmq-operator-5d76f588dd-fs4nf (v1) namespace: pivotal-rabbitmq-system
      2:28:45PM: ---- applying complete [5/5 done] ----
      2:28:45PM: ---- waiting complete [5/5 done] ----

      Succeeded
      + kapp delete -n pivotal-rabbitmq-system --yes -a rabbitmq-broker
      Changes

      Namespace                Name                                  Kind                Conds.  Age  Op      Wait to  Rs  Ri
      -                        p-rmq-servicebroker-role              ClusterRole         -       1h   delete  delete   ok  -
      ~                        p-rmq-servicebroker-rolebinding       ClusterRoleBinding  -       1h   delete  delete   ok  -
      pivotal-rabbitmq-system  p-rmq-servicebroker                   Deployment          2/2 t   1h   delete  delete   ok  -
      ~                        p-rmq-servicebroker-6d5f6b4df7        ReplicaSet          -       1h   -       delete   ok  -
      ~                        p-rmq-servicebroker-6d5f6b4df7-hxrbm  Pod                 4/4 t   1h   -       delete   ok  -
      ~                        p-rmq-servicebroker-ingress           Endpoints           -       1h   -       delete   ok  -
      ~                        p-rmq-servicebroker-ingress           Service             -       1h   delete  delete   ok  -

      Op:      0 create, 4 delete, 0 update, 3 noop
      Wait to: 0 reconcile, 7 delete, 0 noop

      2:28:46PM: ---- applying 7 changes [0/7 done] ----
      2:28:46PM: noop pod/p-rmq-servicebroker-6d5f6b4df7-hxrbm (v1) namespace: pivotal-rabbitmq-system
      2:28:46PM: delete service/p-rmq-servicebroker-ingress (v1) namespace: pivotal-rabbitmq-system
      2:28:46PM: delete clusterrolebinding/p-rmq-servicebroker-rolebinding (rbac.authorization.k8s.io/v1) cluster
      2:28:46PM: noop endpoints/p-rmq-servicebroker-ingress (v1) namespace: pivotal-rabbitmq-system
      2:28:46PM: delete deployment/p-rmq-servicebroker (apps/v1) namespace: pivotal-rabbitmq-system
      2:28:46PM: noop replicaset/p-rmq-servicebroker-6d5f6b4df7 (apps/v1) namespace: pivotal-rabbitmq-system
      2:28:46PM: delete clusterrole/p-rmq-servicebroker-role (rbac.authorization.k8s.io/v1) cluster
      2:28:46PM: ---- waiting on 7 changes [0/7 done] ----
      2:28:46PM: ongoing: delete pod/p-rmq-servicebroker-6d5f6b4df7-hxrbm (v1) namespace: pivotal-rabbitmq-system
      2:28:46PM: ok: delete service/p-rmq-servicebroker-ingress (v1) namespace: pivotal-rabbitmq-system
      2:28:46PM: ok: delete clusterrolebinding/p-rmq-servicebroker-rolebinding (rbac.authorization.k8s.io/v1) cluster
      2:28:46PM: ok: delete endpoints/p-rmq-servicebroker-ingress (v1) namespace: pivotal-rabbitmq-system
      2:28:46PM: ok: delete deployment/p-rmq-servicebroker (apps/v1) namespace: pivotal-rabbitmq-system
      2:28:46PM: ok: delete replicaset/p-rmq-servicebroker-6d5f6b4df7 (apps/v1) namespace: pivotal-rabbitmq-system
      2:28:46PM: ok: delete clusterrole/p-rmq-servicebroker-role (rbac.authorization.k8s.io/v1) cluster
      2:28:46PM: ---- waiting on 1 changes [6/7 done] ----
      2:28:54PM: ok: delete pod/p-rmq-servicebroker-6d5f6b4df7-hxrbm (v1) namespace: pivotal-rabbitmq-system
      2:28:54PM: ---- applying complete [7/7 done] ----
      2:28:54PM: ---- waiting complete [7/7 done] ----

      Succeeded
      + kubectl delete -n pivotal-rabbitmq-system --ignore-not-found -f /cnab/app/manifests/crd.yaml
      warning: deleting cluster-scoped resources, not scoped to the provided namespace
      customresourcedefinition.apiextensions.k8s.io "rabbitmqclusters.rabbitmq.pivotal.io" deleted
      + kubectl delete --ignore-not-found -f /cnab/app/manifests/namespace.yaml
      namespace "pivotal-rabbitmq-system" deleted
    </pre>

Because upgrades are currently not supported, you should also uninstall the product before installing a newer version.

%>
