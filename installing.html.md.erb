---
title: Installing and Configuring Using Kubernetes Manifests
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to install and configure <%= vars.product_name %>.

There are two methods to install <%= vars.product_name %>. Use one of the following:

* **Kubernetes Manifests:** This method requires manually editing YAML but is more flexible than the CNAB method. 
Pivotal recommends this method for advanced users.
* **CNAB:** This method uses CNAB to automate the installation process. 
For instructions, see [Installing and Configuring Using CNAB](./installing-cnab.html).
For information about CNAB, see [Cloud Native Application Bundle](https://cnab.io).

## <a id='prerequisites'></a> Prerequisites

Before you install and configure <%= vars.product_name %>, you must install and configure the following software:

1. **kubectl:** For installation instructions, see the [Install and Set Up kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/) in the Kubernetes documentation.

1. **Docker CLI:** For installation instructions, see the [Docker documentation](https://docs.docker.com/install/).

1. **A v1.14 or later Kubernetes cluster**

1. **A private image registry:** Pivotal recommends that you keep the operator and
service-broker images private if your repository is publicly accessible.
If you do not have access to a private registry, email the team at
rabbitmq-for-k8s@pivotal.io for help.

## <a id='overview'></a> Overview

To install and configure <%= vars.product_name %>:

1. [Download Pivotal RabbitMQ for Kubernetes](#artifact)
1. [Move the Images](#relocate)
1. [(Optional) Configure Kubernetes Cluster Access to Private Images](#private-images)
1. [Configure the Image Repository](#image-repo)
1. [(Optional) Configure the Service Type](#config-service-type)
1. [Create Broker Credentials](#broker-creds)
1. [Deploy the Operator and the Broker and Install RabbitMQCluster](#deploy-op-and-broker)
1. [Register the Broker with Cloud Foundry](#register-broker)

## <a id='artifact'></a> Download Pivotal RabbitMQ for Kubernetes

Download the <%= vars.product_name %> artifact from
[Pivotal Network](https://network.pivotal.io/products/p-rabbitmq-for-kubernetes/). The artifact contains
three docker images as well as deployment manifests for the operator and the broker. The three images are:

1. RabbitMQ
2. RabbitMQ Operator
3. Service Broker

## <a id='relocate'></a> Move the Images

Load the images to your local Docker by running the following commands:

```bash
tar xvf PATH-TO-RABBITMQ-FOR-KUBERNETES-VERSION.tar
cd RABBITMQ-FOR-KUBERNETES-VERSION
docker load -i images/rabbitmq-for-kubernetes-operator
docker load -i images/rabbitmq
docker load -i images/rabbitmq-for-kubernetes-servicebroker
```

Tag each image to point to your own image repository by running these commands:

```bash
~$ docker tag registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq \
>  YOUR-REPOSITORY/rabbitmq:VERSION
~$ docker tag registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq-for-kubernetes-operator \
>  YOUR-REPOSITORY/rabbitmq-for-kubernetes-operator:VERSION
~$ docker tag registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq-for-kubernetes-servicebroker \
>  YOUR-REPOSITORY/rabbitmq-for-kubernetes-servicebroker:VERSION
```

Push each image to your own image repository by running these commands:

```bash
docker push YOUR-REPOSITORY/rabbitmq:VERSION
docker push YOUR-REPOSITORY/rabbitmq-for-kubernetes-operator:VERSION
docker push YOUR-REPOSITORY/rabbitmq-for-kubernetes-servicebroker:VERSION
```

## <a id='private-images'></a> Create the Namespace

1. Create a `pivotal-rabbitmq-system` namespace by running the following command:

    ```
    kubectl apply -f manifests/namespace.yaml
    ```

## <a id='private-images'></a> (Optional) Configure Kubernetes Cluster Access to Private Images

If you require authentication to pull images from your registry, you need to authorize access to them from the pivotal-rabbitmq-system namespace.
To do so, run:

```bash
~$ kubectl -n pivotal-rabbitmq-system create secret docker-registry p-rmq-registry-access --docker-server="$DOCKER_SERVER" --docker-username="$DOCKER_USERNAME" --docker-password="$DOCKER_PASSWORD"
secret/p-rmq-registry-access created
~$ kubectl -n pivotal-rabbitmq-system patch serviceaccount default -p '{"imagePullSecrets": [{"name": "p-rmq-registry-access"}]}'
```

Note: Pivotal recommends that you keep the operator and service-broker images private if your repository is publicly accessible.

## <a id='image-repo'></a> Configure the Image Repository

To configure the image repository:

1. Provide your repository URL in the operator manifest `manifests/operator.yaml`.
1. Replace all instances of REPLACE-WITH-RABBITMQ-IMAGE-REFERENCE with your image repository host. If you use a private registry, also replace the image pull secret as in the example below:

```
apiVersion: v1
data:
  CONFIG: |
    SERVICE:
      TYPE: "ClusterIP"
    IMAGE: "example-registry.pivotal.io/example-rabbitmq/rabbitmq:3.8.0"
    IMAGE_PULL_SECRET: "example-secret"
kind: ConfigMap
metadata:
  name: p-rmq-operator-config
  namespace: pivotal-rabbitmq-system
```

1. Replace all instances of REPLACE-WITH-OPERATOR-IMAGE-URL with the full operator image reference. This reference looks similar to the below.

  `YOUR-REPOSITORY/rabbitmq-for-kubernetes-operator:VERSION`

1. Provide your repository URL in the service broker manifest `manifests/broker.yaml`
1. Replace all instances of REPLACE-WITH-BROKER-IMAGE-URL with the full broker image URL. This URL looks similar to the below.

  `YOUR-REPOSITORY/rabbitmq-for-kubernetes-servicebroker:VERSION`

## <a id='config-service-type'></a> (Optional) Configure the Service Broker Service Type

Service Broker is an OSBAPI-compliant component that allows integration with <%= vars.platform_name %> and other OSBAPI-based
solutions such as [Kubernetes Service Catalog](https://github.com/kubernetes-sigs/service-catalog).

When the Service Broker is deployed, it has to be exposed using a Kubernetes Service so that its endpoint can be
reached by the API clients. By default, a LoadBalancer service type is configured. For more information, see
the [Kubernetes documentation](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types).

To specify a different Service type for the Service Broker or provide additional LoadBalancer configuration (such as annotations):

1. Open `manifests/servicebroker.yaml` in a text editor.
1. Edit the Service defition to meet your requirements (eg. replace the value of `spec.type` from `LoadBalancer` to either `NodePort` or `ClusterIP`), as in the example below:

```yaml
---
apiVersion: v1
kind: Service
metadata:
  name: p-rmq-servicebroker
  namespace: pivotal-rabbitmq-system
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: servicebroker
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}
---
```

## <a id='config-service-type'></a> (Optional) Configure the RabbitMQ Instance Service Type

For each RabbitMQ cluster deployed by the operator, a service is defined to allow RabbitMQ client connections.
By default, <%= vars.product_name %> creates a service of type `ClusterIP`.
To specify a different Service type for all newly created RabbitMQ clusters:

1. Open `manifests/operator.yaml` in a text editor.
1. Find `p-rmq-operator-config` ConfigMap definition.
1. Change `TYPE: "ClusterIP"` to `TYPE: "NodePort"` or `TYPE: "LoadBalancer"`, as in the example below:

```yaml
---
apiVersion: v1
data:
  IMAGE_PULL_SECRET: ""
  IMAGE: "example-registry.pivotal.io/example-rabbitmq/rabbitmq:3.8.0"
  SERVICE: |
    TYPE: "LoadBalancer"
    ANNOTATIONS:
      service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
kind: ConfigMap
metadata:
  name: p-rmq-operator-config
  namespace: pivotal-rabbitmq-system
---
```

`ANNOTATIONS` property is optional and allows vendor-specific `LoadBalancer` configuration.

<p class="note">
  <strong>Note:</strong> the <code>ExternalName</code> Service Type is currently not supported.
</p>

## <a id='broker-creds'></a> Create Broker Credentials

The service broker looks for its username and password in a Kubernetes secret called `broker-credentials` in
the `pivotal-rabbitmq-system` namespace. To create a secret:

1. Run the following commands:

  ```
  echo -n BROKER-USERNAME > ./username
  echo -n BROKER-PASSWORD > ./password
  kubectl create secret generic broker-credentials -n pivotal-rabbitmq-system --from-file=./username --from-file=./password
  ```

  <p class="note">
    <strong>Note:</strong>
    The secret name must be <code>broker-credentials</code> and must be in the <code>pivotal-rabbitmq-system</code>
    namespace with the username and password as part of the data. If not, the service broker fails to deploy.
    To read about other ways to create a secret, see
    <a href="https://kubernetes.io/docs/concepts/configuration/secret">the Kubernetes documentation</a>.
  </p>

## <a id='deploy-op-and-broker'></a> Deploy the Operator and the Broker and Install RabbitMQCluster

To deploy the operator and the broker, and install the `RabbitmqCluster` custom resource definition, run:

  ```
  kubectl apply -f manifests/
  ```

## <a id='register-broker'></a> Register the Broker with Cloud Foundry

1. To register the service broker, run the following cf CLI command:

  ```
  ~$ cf create-service-broker SERVICE-BROKER-NAME BROKER-USERNAME BROKER-PASSWORD \
  >  http://SERVICE-BROKER-IP:8080
  OK
  ```
  Where:
    * `SERVICE-BROKER-NAME` is a name of your choice for the service broker
    * `SERVICE-BROKER-IP` is the external IP assigned to the `LoadBalancer` service named `p-rmq-servicebroker-ingress`,
    which is deployed in namespace `pivotal-rabbitmq-system`
    * `BROKER-USERNAME` is the broker username you used to create the Kubernetes secrets earlier in
    [Create Broker Credentials](#broker-creds).
    * `BROKER-PASSWORD` is the broker password you used to create the Kubernetes secrets earlier in
    [Create Broker Credentials](#broker-creds).

2. After the service broker is registered, run the following command to enable access in the Marketplace:

  ```
  cf enable-service-access p-rabbitmq-k8s -b SERVICE-BROKER-NAME
  ```

## <a id='limitations'></a> Limitations

### <a id='update-rmq-cluster'></a> Updating the RabbitMQ Cluster

Currently you cannot update the RabbitMQ cluster or any of its child objects after creation, such as stateful
set, config map, service, and secrets. Attempts to update any of the configurations have no effect.
`StatefulSet`, `ConfigMap` and `Service` objects are re-created if you delete them. However, `Secret` objects are
not re-created automatically. If you lose them, you must manually re-create the secret or delete the cluster and re-create it again.

### <a id='rmq-image'></a> RabbitMQ Image

Currently Pivotal does not support pulling the RabbitMQ image from a repository that requires authentication.

### <a id='prov-status'></a> Provision Status of Service Instance

Due to the eventually-consistent design of Kubernetes, the Service Broker cannot tell whether a deployment takes a long time, failed
temporarily (could succeed on another attempt) or failed permanently (it will not succeed without human intervention, eg. it refers to
a non-existent `storageClass`). Therefore, the Service Broker never returns the `deployment failed` status but rather `create in progress`.
If the service instance provision status is `create in progress` for more than a few minutes, the RabbitMQ cluster might have
failed permanently. Check the status of the RabbitMQ cluster resources in your Kubernetes cluster for more details about the failure.
