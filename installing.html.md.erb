---
title: Installing and Configuring Using Kubernetes Manifests
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to install and configure <%= vars.product_name %>.

There are two methods to install <%= vars.product_name %>. Use one of the following:

* **Kubernetes Manifests:** This method requires manually editing YAML but is more flexible than the CNAB method. Pivotal recommends this method for advanced users.
* **CNAB:** This method uses CNAB to automate the installation process. For instructions, see [Installing and Configuring Using CNAB](./installing-cnab.html).
For information about CNAB, see [Cloud Native Application Bundle](https://cnab.io).

## <a id='prerequisites'></a> Prerequisites

Before you install and configure <%= vars.product_name %>, you must install and configure the following software:

1. **kubectl:** For installation instructions,
see [Install and Set Up kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/) in the Kubernetes documentation.

1. **The Docker CLI:** For installation instructions,
see the [Docker documentation](https://docs.docker.com/install/).

1. **A Kubernetes cluster:** You must use Kubernetes v1.14 or later.

1. **A private image registry:** Pivotal recommends that you keep the RabbitMQ operator and
service broker images private even if your repository is publicly accessible.
If you do not have access to a private image registry, email the team at
rabbitmq-for-k8s@pivotal.io for help.

## <a id='overview'></a> Overview

To install and configure <%= vars.product_name %>:

1. [Download Pivotal RabbitMQ for Kubernetes](#artifact)
1. [Move the Images](#relocate)
1. [(Optional) Configure Kubernetes Cluster Access to Private Images](#private-images)
1. [Configure the Image Repository](#image-repo)
1. [(Optional) Configure the Service Type](#config-service-type)
1. [Create Broker Credentials](#broker-creds)
1. [Deploy the RabbitMQ Operator and the Broker and Install RabbitMQCluster](#deploy-op-and-broker)
1. [Register the Broker with Cloud Foundry](#register-broker)

## <a id='artifact'></a> Download Pivotal RabbitMQ for Kubernetes

Download the <%= vars.product_name %> artifact from
[Pivotal Network](https://network.pivotal.io/products/p-rabbitmq-for-kubernetes/). The artifact contains
three docker images as well as deployment manifests for the RabbitMQ operator and the broker. The three images are:

1. RabbitMQ
2. RabbitMQ Operator
3. Service Broker

## <a id='set-ver-var'></a> Set a Version Variable

Set a version variable by running:

  ```
  export version=NUMBER-build.NUMBER
  ```

  Where NUMBER is the CNAB artifact version listed in the name of the file downloaded in the previous step.

  For example:
  ```
  export version=0.4.0-build.32
  ```

## <a id='relocate'></a> Move the Images

Load the images to your local Docker by running the following commands:

```bash
tar xvf PATH-TO-RABBITMQ-FOR-KUBERNETES-$version.tar
cd RABBITMQ-FOR-KUBERNETES-$version
docker load -i images/rabbitmq-for-kubernetes-operator
docker load -i images/rabbitmq
docker load -i images/rabbitmq-for-kubernetes-servicebroker
```

Tag each image to point to your own image repository by running these commands:

```bash
~$ docker tag registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq \
>  YOUR-REPOSITORY/rabbitmq:$version
~$ docker tag registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq-for-kubernetes-operator \
>  YOUR-REPOSITORY/rabbitmq-for-kubernetes-operator:$version
~$ docker tag registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq-for-kubernetes-servicebroker \
>  YOUR-REPOSITORY/rabbitmq-for-kubernetes-servicebroker:$version
```

Push each image to your own image repository by running these commands:

```bash
docker push YOUR-REPOSITORY/rabbitmq:$version
docker push YOUR-REPOSITORY/rabbitmq-for-kubernetes-operator:$version
docker push YOUR-REPOSITORY/rabbitmq-for-kubernetes-servicebroker:$version
```

## <a id='private-images'></a> Create the Namespace

1. Create a `pivotal-rabbitmq-system` namespace by running the following command:

    ```
    kubectl apply -f manifests/namespace.yaml
    ```

## <a id='private-images'></a> (Optional) Configure Kubernetes Cluster Access to Private Images

If you require authentication to pull images from your private image registry, you must authorize access to the images from the `pivotal-rabbitmq-system` namespace.

<p class=note><strong>Note:</strong> If your repository is publicly accessible,
  Pivotal recommends that you keep your RabbitMQ operator and service broker images in a private image repository.
</p>

To authorize access to images:

1. Create a secret for your private image registry by running:

    ```
    kubectl -n pivotal-rabbitmq-system create secret \
    docker-registry p-rmq-registry-access \
    --docker-server=DOCKER-SERVER \
    --docker-username=DOCKER-USERNAME \
    --docker-password=DOCKER-PASSWORD
    ```

    Where:
    + `DOCKER-SERVER` is the server URL for your private image registry.
    + `DOCKER-USERNAME` is your username for your private image registry authentication.
    + `DOCKER-PASSWORD` is your password for your private image registry authentication.

    For example
    <pre class="terminal">$ kubectl -n pivotal-rabbitmq-system create secret \
      docker-registry p-rmq-registry-access \
      --docker-server=docker.io/my-registry \
      --docker-username=my-username \
      --docker-password=password1
     secret/p-rmq-registry-access created</pre>

1. Update your service account by running:

    ```
    kubectl -n pivotal-rabbitmq-system patch serviceaccount \
    default -p '{"imagePullSecrets": [{"name": "p-rmq-registry-access"}]}'
    ```

## <a id='image-repo'></a> Configure the Image Repository

To configure the image repository:

1. Provide your repository URL in the RabbitMQ operator manifest `manifests/operator.yaml`.
1. Replace all instances of REPLACE-WITH-RABBITMQ-IMAGE-REFERENCE with your image repository host. If you use a private image registry, also replace the image pull secret as in the example below:

```
apiVersion: v1
data:
  CONFIG: |
    SERVICE:
      TYPE: "ClusterIP"
    IMAGE: "example-registry.pivotal.io/example-rabbitmq/rabbitmq:3.8.0"
    IMAGE_PULL_SECRET: "example-secret"
kind: ConfigMap
metadata:
  name: p-rmq-operator-config
  namespace: pivotal-rabbitmq-system
```

1. Replace all instances of REPLACE-WITH-OPERATOR-IMAGE-URL with the full RabbitMQ operator image reference. This reference looks similar to the below.

  `YOUR-REPOSITORY/rabbitmq-for-kubernetes-operator:$version`

1. Provide your repository URL in the service broker manifest `manifests/broker.yaml`
1. Replace all instances of REPLACE-WITH-BROKER-IMAGE-URL with the full broker image URL. This URL looks similar to the below.

  `YOUR-REPOSITORY/rabbitmq-for-kubernetes-servicebroker:$version`

## <a id='config-service-type'></a> (Optional) Configure the Service Broker ServiceType

The <%= vars.product_short %> service broker is an Open Service Broker API (OSBAPI)-compliant component that enables integration with <%= vars.platform_name %> and other OSBAPI-based
solutions, such as [Service Catalog](https://github.com/kubernetes-sigs/service-catalog).

When the service broker is deployed, you must expose the service broker using a Kubernetes ServiceType.
This enables API clients to reach the service broker endpoint. By default, <%= vars.product_short %> configures a `LoadBalancer` ServiceType.

For more information, see [Publishing Services (ServiceTypes)](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types) in the Kubernetes documentation.

To configure your service broker ServiceType:

1. Open `manifests/broker.yaml` in a text editor.
1. Edit the `Service` definition to meet your requirements.<br>
  For example, in the below code snippet, the value of `spec.type` is changed from `LoadBalancer` to `NodePort`:

    ```yaml
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: p-rmq-servicebroker
      namespace: pivotal-rabbitmq-system
    spec:
      ports:
      - port: 8080
        protocol: TCP
        targetPort: 8080
      selector:
        app: servicebroker
      sessionAffinity: None
      type: NodePort
    status:
      loadBalancer: {}
    ---
    ```

## <a id='config-service-type'></a> (Optional) Configure the RabbitMQ Instance ServiceType

For each RabbitMQ cluster deployed by the RabbitMQ operator, you must configure a ServiceType to enable RabbitMQ client connections.
By default, <%= vars.product_short %> configures a `ClusterIP` ServiceType.

To specify a different ServiceType for all newly created RabbitMQ clusters:

1. Open `manifests/operator.yaml` in a text editor.
1. Find the `p-rmq-operator-config` ConfigMap definition.
1. Change `TYPE: "ClusterIP"` to `TYPE: "NodePort"` or `TYPE: "LoadBalancer"`.<br>
For example:

    ```yaml
    ---
    apiVersion: v1
    data:
      IMAGE_PULL_SECRET: ""
      IMAGE: "example-registry.pivotal.io/example-rabbitmq/rabbitmq:3.8.0"
      SERVICE: |
        TYPE: "LoadBalancer"
        ANNOTATIONS:
          service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
    kind: ConfigMap
    metadata:
      name: p-rmq-operator-config
      namespace: pivotal-rabbitmq-system
    ---
    ```

The `ANNOTATIONS` property is optional and enables vendor-specific `LoadBalancer` configuration.

<p class="note">
  <strong>Note:</strong> <%= vars.product_short %> currently does not support the <code>ExternalName</code> ServiceType.
</p>

## <a id='broker-creds'></a> Create Broker Credentials

The <%= vars.product_short %> service broker looks for its username and password in a Kubernetes secret called `broker-credentials` in
the `pivotal-rabbitmq-system` namespace. To create a secret:

1. Run the following commands:

  ```
  echo -n BROKER-USERNAME > ./username
  echo -n BROKER-PASSWORD > ./password
  kubectl create secret generic broker-credentials -n pivotal-rabbitmq-system --from-file=./username --from-file=./password
  ```

  <p class="note">
    <strong>Note:</strong>
    The secret name must be <code>broker-credentials</code> and must be in the <code>pivotal-rabbitmq-system</code>
    namespace with the username and password as part of the data. If not, the service broker fails to deploy.
    To read about other ways to create a secret, see
    <a href="https://kubernetes.io/docs/concepts/configuration/secret">the Kubernetes documentation</a>.
  </p>

## <a id='deploy-op-and-broker'></a> Deploy the RabbitMQ Operator and the Broker and Install RabbitMQCluster

To deploy the RabbitMQ operator and the broker, and install the `RabbitmqCluster` custom resource definition, run:

  ```
  kubectl apply -f manifests/
  ```

## <a id='register-broker'></a> Register the Broker with Cloud Foundry

1. Register the service broker by running:

    ```
    cf create-service-broker SERVICE-BROKER-NAME BROKER-USERNAME BROKER-PASSWORD \
    http://SERVICE-BROKER-IP:8080
    ```
    Where:
      * `SERVICE-BROKER-NAME` is a name you choose for the service broker
      * `SERVICE-BROKER-IP` is the external IP assigned to the `LoadBalancer` named `p-rmq-servicebroker`. `LoadBalancer` is deployed in namespace `pivotal-rabbitmq-system`.
      * `BROKER-USERNAME` is the broker username you used to create the Kubernetes secrets in
      [Create Broker Credentials](#broker-creds) above.
      * `BROKER-PASSWORD` is the broker password you used to create the Kubernetes secrets in
      [Create Broker Credentials](#broker-creds) above.

2. After the service broker is registered, enable access in the Marketplace by running:

    ```
    cf enable-service-access p-rabbitmq-k8s -b SERVICE-BROKER-NAME
    ```

## <a id='uninstall-bundle'></a> Uninstall the Bundle

Follow the steps in [Uninstall the Bundle](./upgrading.html#uninstall-bundle)


## <a id='troubleshooting'></a> Troubleshoot the Installation

To troubleshoot the installation, follow the steps in [Troubleshoot the Installation](./troubleshooting.html#ts-install).
