---
title: Installing and Configuring Using Kubernetes Manifests
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to install and configure Pivotal RabbitMQ for Kubernetes.

There are two methods to install RabbitMQ for Kubernetes, use one of the following:

* **Kubernetes Manifests:** If you are installing for the first time, use the procedure in this topic.
* **CNAB:** If you have previously installed Pivotal RabbitMQ for Kubernetes, use this.
For instructions, see [Installing and Configuring Using CNAB](./installing-cnab.html)

## <a id='prerequisites'></a> Prerequisites

Before you install and configure RabbitMQ for Kubernetes, you must install and configure the following software:

1. **kubectl:** For installation instructions, see [Install and Set Up kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/). <%# should we say install the latest version of kubectl %>

1. **Docker:** For installation instructions, see [Docker](https://docs.docker.com/install/)  <%# what should be downloaded - the docker cli? %>

1. **A Kubernetes cluster** <%# Do we want to mention Enterprise PKS here? %>

1. **A private registry:** Pivotal recommends that you keep the operator and
service-broker images private if your repository is publicly accessible.
If you do not have access to a private registry, email the team at
rabbitmq-for-k8s@pivotal.io for help.

## <a id='overview'></a> Overview

To install and configure RabbitMQ for Kubernetes:

1. [Download Pivotal RabbitMQ for Kubernetes](#artifact)
1. [Move the Images](#relocate)
1. [(Optional) Configure Kubernetes Cluster Access to Private Images](#private-images)
1. [Configure the Image Repository](#image-repo)
1. [(Optional) Configure the Service Type](#config-service-type)
1. [Create Broker Credentials](#broker-creds)
1. [Deploy the Operator and the Broker and Install RabbitMQCluster](#deploy-op-and-broker)
1. [Register the Broker with Cloud Foundry](#register-broker)

## <a id='artifact'></a> Download Pivotal RabbitMQ for Kubernetes

Download the Pivotal RabbitMQ for Kubernetes artifact from
[Pivotal Network](https://network.pivotal.io/products/p-rabbitmq-for-kubernetes/). The artifact contains
three docker images as well as deployment manifests for the operator and the broker. The three images are:

1. RabbitMQ
2. RabbitMQ Operator
3. Service Broker

## <a id='relocate'></a> Move the Images

Load the images to your local Docker by running the following commands:

```bash
tar xvf PATH-TO-RABBITMQ-FOR-KUBERNETES-VERSION.tar
docker load -i rabbitmq-for-kubernetes-operator
docker load -i rabbitmq-3.8-rc-management
docker load -i rabbitmq-for-kubernetes-servicebroker
```

Tag each image to point to your own image repository by running these commands:

```bash
~$ docker tag rabbitmq-3.8-rc-management \
>  YOUR-REPOSITORY/rabbitmq:3.8-rc-management
~$ docker tag rabbitmq-for-kubernetes-operator \
>  YOUR-REPOSITORY/rabbitmq-for-kubernetes-operator:VERSION
~$ docker tag rabbitmq-for-kubernetes-servicebroker \
>  YOUR-REPOSITORY/rabbitmq-for-kubernetes-servicebroker:VERSION
```

Push each image to your own image repository by running these commands:

```bash
docker push YOUR-REPOSITORY/rabbitmq:3.8-rc-management
docker push YOUR-REPOSITORY/rabbitmq-for-kubernetes-operator:VERSION
docker push YOUR-REPOSITORY/rabbitmq-for-kubernetes-servicebroker:VERSION
```

## <a id='private-images'></a> (Optional) Configure Kubernetes Cluster Access to Private Images

Pivotal recommends that you keep the operator and service-broker images private if your repository is publicly accessible.
To do so:

1. Create a `pivotal-rabbitmq-system` namespace by running the following command:

    ```
    kubectl apply -f manifests/namespace.yaml
    ```

1. In your cluster, create a Kubernetes secret that authorizes access to private images in the namespace that
you just created. To do so, run:

    ```
    kubectl -n pivotal-rabbitmq-system create secret docker-registry p-rmq-registry-access \
    --docker-server="DOCKER-SERVER" --docker-username="DOCKER-USERNAME" \
    --docker-password="DOCKER-PASSWORD"
    ```

    For example:
    <pre class="terminal">$ kubectl -n pivotal-rabbitmq-system create secret docker-registry p-rmq-registry-access \
      --docker-server="registry.pivotal.io" --docker-username="your-pivnet-email@gmail.com" \
      --docker-password="password1"
    </pre>

1. Repeat the above steps for the `pivotal-rabbitmq-servicebroker-system` namespace.
For more information, see [the Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/)


## <a id='image-repo'></a> Configure the Image Repository

To configure the image repository:

1. Provide your repository URL in the operator manifest `manifests/operator.yaml`.
1. Replace all instances of REPLACE-WITH-RABBITMQ-IMAGE-URL with your image repository host, as in the example below:

```
apiVersion: v1
data:
  CONFIG: |
    SERVICE:
      TYPE: "ClusterIP"
    IMAGE_URL: "EXAMPLE-RABBITMQ-IMAGE-URL"
    IMAGE_PULL_SECRET: ""
kind: ConfigMap
metadata:
  name: p-rmq-operator-config
  namespace: pivotal-rabbitmq-system
```

1. Replace all instances of REPLACE-WITH-OPERATOR-IMAGE-URL with the full operator image URL. This URL looks similar to the below.

  `YOUR-REPOSITORY/rabbitmq-for-kubernetes-operator:VERSION`

1. Provide your repository URL in the service broker manifest `manifests/service-broker.yaml`
1. Replace all instances of REPLACE-WITH-BROKER-IMAGE-URL with the full broker image URL. This URL looks similar to the below.

  `YOUR-REPOSITORY/rabbitmq-for-kubernetes-servicebroker:VERSION`

## <a id='config-service-type'></a> (Optional) Configure the Service Type

If you do not want to use the default Service types for the RabbitMQ Operator and the Service Broker components,
you can edit the manifests to change the Service Type.

| Component | Default Service Type |
| ------|----------------------|
| RabbitMQ Operator | `ClusterIP` |
| Service Broker | `LoadBalancer` |

For more information about the Service types, see
[the Kubernetes documentation](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types).

<p class="note">
  <strong>Note:</strong> the <code>ExternalName</code> Service Type is currently not supported.
</p>

### <a id='procedures'></a> Procedures

To specify a Service type for the RabbitMQ operator:

1. Open `manifests/operator.yaml` in a text editor.
1. Change `TYPE: "ClusterIP"` to `TYPE: "NodePort"` or `TYPE: "LoadBalancer"`, as in the example below:

```yaml
---
apiVersion: v1
data:
  IMAGE_PULL_SECRET: ""
  IMAGE_REPOSITORY: YOUR-IMAGE-REPOSITORY-HOST
  SERVICE: |
    TYPE: "NodePort"
kind: ConfigMap
metadata:
  name: pivotal-rabbitmq-manager-config
  namespace: pivotal-rabbitmq-system
---
```

To specify a Service type for the Service Broker:

1. Open `manifests/servicebroker.yaml` in a text editor.
1. Replace the value of `spec.type` from `LoadBalancer` to either `NodePort` or `ClusterIP`, as in the example below:

```yaml
---
apiVersion: v1
kind: Service
metadata:
  name: p-rmq-servicebroker
  namespace: pivotal-rabbitmq-system
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: servicebroker
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}
---
```

## <a id='broker-creds'></a> Create Broker Credentials

The service broker looks for its username and password in a Kubernetes secret called `broker-credentials` in
the `pivotal-rabbitmq-system` namespace. To create a secret:

1. Run the following commands:

  ```
  echo -n BROKER-USERNAME > ./username
  echo -n BROKER-PASSWORD > ./password
  kubectl create secret generic broker-credentials -n pivotal-rabbitmq-system --from-file=./username --from-file=./password
  ```

  <p class="note">
    <strong>Note:</strong>
    The secret name must be `broker-credentials` and must be in the `pivotal-rabbitmq-system`
    namespace with the username and password as part of the data. If not, the service broker fails to deploy.
    To read about other ways to create a secret, see
    <a href="https://kubernetes.io/docs/concepts/configuration/secret">the Kubernetes documentation</a>.
  </p>

## <a id='deploy-op-and-broker'></a> Deploy the Operator and the Broker and Install RabbitMQCluster

To deploy the operator and the broker, and install the `RabbitmqCluster` custom resource definition, run:

  ```
  kubectl apply -f manifests/
  ```

## <a id='register-broker'></a> Register the Broker with Cloud Foundry

1. To register the service broker, run the following cf CLI command:

  ```
  ~$ cf create-service-broker SERVICE-BROKER-NAME BROKER-USERNAME BROKER-PASSWORD \
  >  http://SERVICE-BROKER-IP:8080
  ```
  Where:
    * `SERVICE-BROKER-NAME` is a name of your choice for the service broker
    * `SERVICE-BROKER-IP` is the external IP assigned to the `LoadBalancer` service named `p-rmq-servicebroker`,
    which is deployed in the service broker namespace `pivotal-rabbitmq-servicebroker-system`
    * `BROKER-USERNAME` is the broker username you used to create the Kubernetes secrets earlier in
    [Create Broker Credentials](#broker-creds).
    * `BROKER-PASSWORD` is the broker password you used to create the Kubernetes secrets earlier in
    [Create Broker Credentials](#broker-creds).

2. After the service broker is registered, run the following command to enable access in the Marketplace:

  ```
  cf enable-service-access p-rabbitmq-k8s -b SERVICE-BROKER-NAME
  ```

## <a id='limitations'></a> Limitations

### <a id='update-rmq-cluster'></a> Updating the RabbitMQ Cluster

Currently you cannot update the RabbitMQ cluster or any of its child objects after creation, such as stateful
set, config map, service, and secrets. Attempts to update any of the configurations have no effect.
Stateful set objects are re-created if you delete them.
If you delete the child config map, service, or secret objects, however, they are not re-created. In this case,
you must delete the cluster and re-create it again.

### <a id='rmq-image'></a> RabbitMQ Image

Currently Pivotal does not support pulling the RabbitMQ image from a repository that requires authentication.

### <a id='service-broker'></a> Service Broker

Currently the service broker can only provision instances in the the Kubernetes cluster that the operator and
broker are deployed in. The broker creates a new namespace for each instance to live in.

### <a id='prov-status'></a> Provision Status of Service Instance

If the service instance provision status is constantly `create in progress`, the RabbitMQ cluster might have
failed to generate. Check the status of the RabbitMQ cluster resources in your Kubernetes cluster for more
details about the failure.
